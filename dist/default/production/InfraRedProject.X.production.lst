

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Mar 23 18:10:20 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 1.41
    40                           ; Generated 25/01/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F2550 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     _RCREG	set	4014
    74  0000                     _TXREG	set	4013
    75  0000                     _SPBRG	set	4015
    76  0000                     _SPBRGH	set	4016
    77  0000                     _TXSTAbits	set	4012
    78  0000                     _PIE1bits	set	3997
    79  0000                     _RCIF	set	31989
    80  0000                     _TXIF	set	31988
    81  0000                     _PEIE	set	32662
    82  0000                     _GIE	set	32663
    83  0000                     _IPEN	set	32391
    84  0000                     _TXIP	set	31996
    85  0000                     _RCIP	set	31997
    86  0000                     _RCIE	set	31981
    87  0000                     _TRISC6	set	31910
    88  0000                     _TRISC7	set	31911
    89  0000                     _ABDEN	set	32192
    90  0000                     _WUE	set	32193
    91  0000                     _BRG16	set	32195
    92  0000                     _TXCKP	set	32196
    93  0000                     _RXDTP	set	32197
    94  0000                     _ADDEN	set	32091
    95  0000                     _CREN	set	32092
    96  0000                     _RX9	set	32094
    97  0000                     _SPEN	set	32095
    98  0000                     _BRGH	set	32098
    99  0000                     _SENDB	set	32099
   100  0000                     _SYNC	set	32100
   101  0000                     _TX9	set	32102
   102  0000                     _RC0	set	31760
   103  0000                     _TRISC0	set	31904
   104                           
   105                           	psect	smallconst
   106  000800                     __psmallconst:
   107                           	opt stack 0
   108  000800  00                 	db	0
   109  000801                     STR_1:
   110  000801  54                 	db	84	;'T'
   111  000802  68                 	db	104	;'h'
   112  000803  69                 	db	105	;'i'
   113  000804  73                 	db	115	;'s'
   114  000805  20                 	db	32
   115  000806  69                 	db	105	;'i'
   116  000807  73                 	db	115	;'s'
   117  000808  20                 	db	32
   118  000809  74                 	db	116	;'t'
   119  00080A  65                 	db	101	;'e'
   120  00080B  73                 	db	115	;'s'
   121  00080C  74                 	db	116	;'t'
   122  00080D  69                 	db	105	;'i'
   123  00080E  6E                 	db	110	;'n'
   124  00080F  67                 	db	103	;'g'
   125  000810  20                 	db	32
   126  000811  55                 	db	85	;'U'
   127  000812  41                 	db	65	;'A'
   128  000813  52                 	db	82	;'R'
   129  000814  54                 	db	84	;'T'
   130  000815  00                 	db	0
   131  0000                     
   132                           ; #config settings
   133  000816  00                 	db	0	; dummy byte at the end
   134  0000                     
   135                           	psect	cinit
   136  00116E                     __pcinit:
   137                           	opt stack 0
   138  00116E                     start_initialization:
   139                           	opt stack 0
   140  00116E                     __initialization:
   141                           	opt stack 0
   142                           
   143                           ; Clear objects allocated to BANK1 (256 bytes)
   144  00116E  EE01  F000         	lfsr	0,__pbssBANK1
   145  001172  EE11 F000          	lfsr	1,256
   146  001176                     clear_0:
   147  001176  6AEE               	clrf	postinc0,c
   148  001178  50E5               	movf	postdec1,w,c
   149  00117A  50E1               	movf	fsr1l,w,c
   150  00117C  E1FC               	bnz	clear_0
   151  00117E  50E2               	movf	fsr1h,w,c
   152  001180  E1FA               	bnz	clear_0
   153                           
   154                           ; Clear objects allocated to COMRAM (20 bytes)
   155  001182  EE00  F02D         	lfsr	0,__pbssCOMRAM
   156  001186  0E14               	movlw	20
   157  001188                     clear_1:
   158  001188  6AEE               	clrf	postinc0,c
   159  00118A  06E8               	decf	wreg,f,c
   160  00118C  E1FD               	bnz	clear_1
   161  00118E                     end_of_initialization:
   162                           	opt stack 0
   163  00118E                     __end_of__initialization:
   164                           	opt stack 0
   165  00118E  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   166  001190  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   167  001192  0E00               	movlw	low (__Lmediumconst shr (0+16))
   168  001194  6EF8               	movwf	tblptru,c
   169  001196  0100               	movlb	0
   170  001198  EF9A  F004         	goto	_main	;jump to C main() function
   171                           tblptru	equ	0xFF8
   172                           postinc0	equ	0xFEE
   173                           wreg	equ	0xFE8
   174                           postdec1	equ	0xFE5
   175                           fsr1h	equ	0xFE2
   176                           fsr1l	equ	0xFE1
   177                           
   178                           	psect	bssCOMRAM
   179  00002D                     __pbssCOMRAM:
   180                           	opt stack 0
   181  00002D                     _cbTX1:
   182                           	opt stack 0
   183  00002D                     	ds	10
   184  000037                     _cbRC1:
   185                           	opt stack 0
   186  000037                     	ds	10
   187                           tblptru	equ	0xFF8
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           postdec1	equ	0xFE5
   191                           fsr1h	equ	0xFE2
   192                           fsr1l	equ	0xFE1
   193                           
   194                           	psect	bssBANK1
   195  000100                     __pbssBANK1:
   196                           	opt stack 0
   197  000100                     _buff_tx1:
   198                           	opt stack 0
   199  000100                     	ds	128
   200  000180                     _buff_rc1:
   201                           	opt stack 0
   202  000180                     	ds	128
   203                           tblptru	equ	0xFF8
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           postdec1	equ	0xFE5
   207                           fsr1h	equ	0xFE2
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	cstackBANK0
   211  000060                     __pcstackBANK0:
   212                           	opt stack 0
   213  000060                     sendXByte@waitToTx:
   214                           	opt stack 0
   215  000060                     readXData@ret:
   216                           	opt stack 0
   217  000060                     sendXData@data:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221  000060                     	ds	1
   222  000061                     sendXByte@cbTX:
   223                           	opt stack 0
   224  000061                     readXData@sizegiven:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x1
   228  000061                     	ds	1
   229  000062                     sendXData@size:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x2
   233  000062                     	ds	1
   234  000063                     sendXByte@data:
   235                           	opt stack 0
   236  000063                     readXData@index:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x3
   240  000063                     	ds	1
   241  000064                     sendXByte@ret:
   242                           	opt stack 0
   243  000064                     sendXData@waitToTx:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x4
   247  000064                     	ds	1
   248  000065                     sendByte@waitToTx:
   249                           	opt stack 0
   250  000065                     sendXData@cbTX:
   251                           	opt stack 0
   252  000065                     readData@data:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x5
   256  000065                     	ds	1
   257  000066                     sendByte@data:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x6
   261  000066                     	ds	1
   262  000067                     sendXData@ret:
   263                           	opt stack 0
   264  000067                     readData@size:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x7
   268  000067                     	ds	1
   269  000068                     sendXData@sizegiven:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x8
   273  000068                     	ds	2
   274  00006A                     sendXData@index:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0xA
   278  00006A                     	ds	2
   279  00006C                     sendData@data:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0xC
   283  00006C                     	ds	2
   284  00006E                     sendData@size:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0xE
   288  00006E                     	ds	2
   289  000070                     sendData@waitToTx:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x10
   293  000070                     	ds	1
   294  000071                     ??_main:
   295                           
   296                           ; 1 bytes @ 0x11
   297  000071                     	ds	2
   298  000073                     main@recievedBuffer:
   299                           	opt stack 0
   300                           
   301                           ; 100 bytes @ 0x13
   302  000073                     	ds	100
   303  0000D7                     main@pulseCounter:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x77
   307  0000D7                     	ds	2
   308  0000D9                     main@recLen:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x79
   312  0000D9                     	ds	1
   313                           tblptru	equ	0xFF8
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           postdec1	equ	0xFE5
   317                           fsr1h	equ	0xFE2
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	cstackCOMRAM
   321  000001                     __pcstackCOMRAM:
   322                           	opt stack 0
   323  000001                     ?i2_circularbIsFull:
   324                           	opt stack 0
   325  000001                     ?i2_circularbIsEmpty:
   326                           	opt stack 0
   327  000001                     i2circularbIsFull@cb:
   328                           	opt stack 0
   329  000001                     i2circularbIsEmpty@cb:
   330                           	opt stack 0
   331  000001                     i2circularbRead@cb:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x0
   335  000001                     	ds	2
   336  000003                     ??i2_circularbIsFull:
   337  000003                     i2circularbRead@element:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x2
   341  000003                     	ds	2
   342  000005                     ??i2_circularbRead:
   343  000005                     i2circularbIsFull@aux:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x4
   347  000005                     	ds	2
   348  000007                     i2circularbWrite@cb:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x6
   352  000007                     	ds	2
   353  000009                     i2circularbWrite@element:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x8
   357  000009                     	ds	2
   358  00000B                     ??i2_circularbWrite:
   359                           
   360                           ; 1 bytes @ 0xA
   361  00000B                     	ds	4
   362  00000F                     handler_uart_int@readed:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0xE
   366  00000F                     	ds	1
   367  000010                     handler_uart_int@toTransmit:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0xF
   371  000010                     	ds	1
   372  000011                     ??_ISR:
   373                           
   374                           ; 1 bytes @ 0x10
   375  000011                     	ds	14
   376  00001F                     ?_strlen:
   377                           	opt stack 0
   378  00001F                     ?_circularbIsFull:
   379                           	opt stack 0
   380  00001F                     ?_circularbNumElements:
   381                           	opt stack 0
   382  00001F                     ?_circularbIsEmpty:
   383                           	opt stack 0
   384  00001F                     ?_circularbRead:
   385                           	opt stack 0
   386  00001F                     circularbInit@cb:
   387                           	opt stack 0
   388  00001F                     circularbIsFull@cb:
   389                           	opt stack 0
   390  00001F                     circularbNumElements@cb:
   391                           	opt stack 0
   392  00001F                     circularbIsEmpty@cb:
   393                           	opt stack 0
   394  00001F                     circularbRead@cb:
   395                           	opt stack 0
   396  00001F                     strlen@s:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x1E
   400  00001F                     	ds	2
   401  000021                     ??_strlen:
   402  000021                     ??_circularbIsFull:
   403  000021                     circularbInit@buf:
   404                           	opt stack 0
   405  000021                     circularbRead@element:
   406                           	opt stack 0
   407  000021                     dataXAvailable@cbRC:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x20
   411  000021                     	ds	2
   412  000023                     ??_circularbRead:
   413  000023                     circularbInit@size:
   414                           	opt stack 0
   415  000023                     circularbIsFull@aux:
   416                           	opt stack 0
   417  000023                     strlen@cp:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x22
   421  000023                     	ds	2
   422  000025                     ?_circularbWrite:
   423                           	opt stack 0
   424  000025                     circularbWrite@cb:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x24
   428  000025                     	ds	2
   429  000027                     circularbWrite@element:
   430                           	opt stack 0
   431  000027                     readXData@data:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x26
   435  000027                     	ds	2
   436  000029                     ??_circularbWrite:
   437  000029                     readXData@size:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x28
   441  000029                     	ds	2
   442  00002B                     readXData@cbRC:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x2A
   446  00002B                     	ds	2
   447  00002D                     tblptru	equ	0xFF8
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1h	equ	0xFE2
   452                           fsr1l	equ	0xFE1
   453                           
   454                           ; 1 bytes @ 0x2C
   455 ;;
   456 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   457 ;;
   458 ;; *************** function _main *****************
   459 ;; Defined at:
   460 ;;		line 92 in file "infraRedProject.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;		None
   463 ;; Auto vars:     Size  Location     Type
   464 ;;  recievedBuff  100   19[BANK0 ] unsigned char [100]
   465 ;;  freqString     20    0        unsigned char [20]
   466 ;;  pulseCounter    2  119[BANK0 ] unsigned int 
   467 ;;  recLen          1  121[BANK0 ] unsigned char 
   468 ;; Return value:  Size  Location     Type
   469 ;;                  2   25[None  ] int 
   470 ;; Registers used:
   471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   477 ;;      Params:         0       0       0       0       0       0       0       0       0
   478 ;;      Locals:         0     103       0       0       0       0       0       0       0
   479 ;;      Temps:          0       2       0       0       0       0       0       0       0
   480 ;;      Totals:         0     105       0       0       0       0       0       0       0
   481 ;;Total ram usage:      105 bytes
   482 ;; Hardware stack levels required when called:    8
   483 ;; This function calls:
   484 ;;		_dataAvailable
   485 ;;		_initUart
   486 ;;		_readData
   487 ;;		_sendByte
   488 ;;		_sendData
   489 ;;		_strlen
   490 ;; This function is called by:
   491 ;;		Startup code after reset
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           	psect	text0
   496  000934                     __ptext0:
   497                           	opt stack 0
   498  000934                     _main:
   499                           	opt stack 23
   500                           
   501                           ;infraRedProject.c: 93: unsigned char recLen = 0;
   502                           
   503                           ;incstack = 0
   504  000934  0E00               	movlw	0
   505  000936  0100               	movlb	0	; () banked
   506  000938  6FD9               	movwf	main@recLen& (0+255),b
   507                           
   508                           ; BSR set to: 0
   509                           ;infraRedProject.c: 94: unsigned char recievedBuffer[100];
   510                           ;infraRedProject.c: 96: TRISC0 = 0;
   511  00093A  9094               	bcf	3988,0,c	;volatile
   512                           
   513                           ;infraRedProject.c: 97: unsigned char freqString[20];
   514                           ;infraRedProject.c: 98: unsigned int pulseCounter = 10;
   515  00093C  0E00               	movlw	0
   516  00093E  0100               	movlb	0	; () banked
   517  000940  6FD8               	movwf	(main@pulseCounter+1)& (0+255),b
   518  000942  0E0A               	movlw	10
   519  000944  6FD7               	movwf	main@pulseCounter& (0+255),b
   520                           
   521                           ; BSR set to: 0
   522                           ;infraRedProject.c: 100: initUart();
   523  000946  EC67  F007         	call	_initUart	;wreg free
   524                           
   525                           ;infraRedProject.c: 101: sendData("This is testing UART", strlen("This is testing UART")
      +                          , 1);
   526  00094A  0E01               	movlw	low STR_1
   527  00094C  0100               	movlb	0	; () banked
   528  00094E  6F6C               	movwf	sendData@data& (0+255),b
   529  000950  0E08               	movlw	high STR_1
   530  000952  0100               	movlb	0	; () banked
   531  000954  6F6D               	movwf	(sendData@data+1)& (0+255),b
   532  000956  0E01               	movlw	low STR_1
   533  000958  6E1F               	movwf	strlen@s,c
   534  00095A  0E08               	movlw	high STR_1
   535  00095C  6E20               	movwf	strlen@s+1,c
   536  00095E  EC98  F008         	call	_strlen	;wreg free
   537  000962  C01F  F06E         	movff	?_strlen,sendData@size
   538  000966  C020  F06F         	movff	?_strlen+1,sendData@size+1
   539  00096A  0E01               	movlw	1
   540  00096C  0100               	movlb	0	; () banked
   541  00096E  6F70               	movwf	sendData@waitToTx& (0+255),b
   542  000970  ECFC  F008         	call	_sendData	;wreg free
   543                           
   544                           ;infraRedProject.c: 102: sendByte(0x0A, 1);
   545  000974  0E01               	movlw	1
   546  000976  0100               	movlb	0	; () banked
   547  000978  6F65               	movwf	sendByte@waitToTx& (0+255),b
   548  00097A  0E0A               	movlw	10
   549  00097C  EC0F  F009         	call	_sendByte
   550                           
   551                           ;infraRedProject.c: 103: sendByte(0x0D, 1);
   552  000980  0E01               	movlw	1
   553  000982  0100               	movlb	0	; () banked
   554  000984  6F65               	movwf	sendByte@waitToTx& (0+255),b
   555  000986  0E0D               	movlw	13
   556  000988  EC0F  F009         	call	_sendByte
   557  00098C                     l1725:
   558                           
   559                           ;infraRedProject.c: 105: if ((recLen = dataAvailable()) > 0) {
   560  00098C  EC40  F009         	call	_dataAvailable	;wreg free
   561  000990  0100               	movlb	0	; () banked
   562  000992  6FD9               	movwf	main@recLen& (0+255),b
   563  000994  0100               	movlb	0	; () banked
   564  000996  51D9               	movf	main@recLen& (0+255),w,b
   565  000998  B4D8               	btfsc	status,2,c
   566  00099A  D027               	goto	l1735
   567                           
   568                           ; BSR set to: 0
   569                           ;infraRedProject.c: 106: readData(recievedBuffer, recLen);
   570  00099C  0E73               	movlw	low main@recievedBuffer
   571  00099E  0100               	movlb	0	; () banked
   572  0009A0  6F65               	movwf	readData@data& (0+255),b
   573  0009A2  0E00               	movlw	high main@recievedBuffer
   574  0009A4  0100               	movlb	0	; () banked
   575  0009A6  6F66               	movwf	(readData@data+1)& (0+255),b
   576  0009A8  C0D9  F067         	movff	main@recLen,readData@size
   577  0009AC  0100               	movlb	0	; () banked
   578  0009AE  6B68               	clrf	(readData@size+1)& (0+255),b
   579  0009B0  EC1E  F009         	call	_readData	;wreg free
   580                           
   581                           ;infraRedProject.c: 107: sendData(recievedBuffer, recLen, 1);
   582  0009B4  0E73               	movlw	low main@recievedBuffer
   583  0009B6  0100               	movlb	0	; () banked
   584  0009B8  6F6C               	movwf	sendData@data& (0+255),b
   585  0009BA  0E00               	movlw	high main@recievedBuffer
   586  0009BC  0100               	movlb	0	; () banked
   587  0009BE  6F6D               	movwf	(sendData@data+1)& (0+255),b
   588  0009C0  C0D9  F06E         	movff	main@recLen,sendData@size
   589  0009C4  0100               	movlb	0	; () banked
   590  0009C6  6B6F               	clrf	(sendData@size+1)& (0+255),b
   591  0009C8  0E01               	movlw	1
   592  0009CA  0100               	movlb	0	; () banked
   593  0009CC  6F70               	movwf	sendData@waitToTx& (0+255),b
   594  0009CE  ECFC  F008         	call	_sendData	;wreg free
   595                           
   596                           ;infraRedProject.c: 108: sendByte(0x0A, 1);
   597  0009D2  0E01               	movlw	1
   598  0009D4  0100               	movlb	0	; () banked
   599  0009D6  6F65               	movwf	sendByte@waitToTx& (0+255),b
   600  0009D8  0E0A               	movlw	10
   601  0009DA  EC0F  F009         	call	_sendByte
   602                           
   603                           ;infraRedProject.c: 109: sendByte(0x0D, 1);
   604  0009DE  0E01               	movlw	1
   605  0009E0  0100               	movlb	0	; () banked
   606  0009E2  6F65               	movwf	sendByte@waitToTx& (0+255),b
   607  0009E4  0E0D               	movlw	13
   608  0009E6  EC0F  F009         	call	_sendByte
   609  0009EA                     l1735:
   610                           
   611                           ;infraRedProject.c: 110: }
   612                           ;infraRedProject.c: 112: RC0 = 1;
   613  0009EA  8082               	bsf	3970,0,c	;volatile
   614                           
   615                           ;infraRedProject.c: 113: _delay((unsigned long)((1000)*(48000000/4000.0)));
   616  0009EC  0E3D               	movlw	61
   617  0009EE  0100               	movlb	0	; () banked
   618  0009F0  6F72               	movwf	(??_main+1)& (0+255),b
   619  0009F2  0EE1               	movlw	225
   620  0009F4  0100               	movlb	0	; () banked
   621  0009F6  6F71               	movwf	??_main& (0+255),b
   622  0009F8  0E3F               	movlw	63
   623  0009FA                     u1357:
   624  0009FA  2EE8               	decfsz	wreg,f,c
   625  0009FC  D7FE               	bra	u1357
   626  0009FE  2F71               	decfsz	??_main& (0+255),f,b
   627  000A00  D7FC               	bra	u1357
   628  000A02  2F72               	decfsz	(??_main+1)& (0+255),f,b
   629  000A04  D7FA               	bra	u1357
   630  000A06  D000               	nop2	
   631                           
   632                           ;infraRedProject.c: 114: RC0 = 0;
   633  000A08  9082               	bcf	3970,0,c	;volatile
   634                           
   635                           ;infraRedProject.c: 115: _delay((unsigned long)((1000)*(48000000/4000.0)));
   636  000A0A  0E3D               	movlw	61
   637  000A0C  0100               	movlb	0	; () banked
   638  000A0E  6F72               	movwf	(??_main+1)& (0+255),b
   639  000A10  0EE1               	movlw	225
   640  000A12  0100               	movlb	0	; () banked
   641  000A14  6F71               	movwf	??_main& (0+255),b
   642  000A16  0E3F               	movlw	63
   643  000A18                     u1367:
   644  000A18  2EE8               	decfsz	wreg,f,c
   645  000A1A  D7FE               	bra	u1367
   646  000A1C  2F71               	decfsz	??_main& (0+255),f,b
   647  000A1E  D7FC               	bra	u1367
   648  000A20  2F72               	decfsz	(??_main+1)& (0+255),f,b
   649  000A22  D7FA               	bra	u1367
   650  000A24  D000               	nop2	
   651                           
   652                           ;infraRedProject.c: 116: sendByte(0x48, 1);
   653  000A26  0E01               	movlw	1
   654  000A28  0100               	movlb	0	; () banked
   655  000A2A  6F65               	movwf	sendByte@waitToTx& (0+255),b
   656  000A2C  0E48               	movlw	72
   657  000A2E  EC0F  F009         	call	_sendByte
   658                           
   659                           ;infraRedProject.c: 117: sendByte(0x0A, 1);
   660  000A32  0E01               	movlw	1
   661  000A34  0100               	movlb	0	; () banked
   662  000A36  6F65               	movwf	sendByte@waitToTx& (0+255),b
   663  000A38  0E0A               	movlw	10
   664  000A3A  EC0F  F009         	call	_sendByte
   665                           
   666                           ;infraRedProject.c: 118: sendByte(0x0D, 1);
   667  000A3E  0E01               	movlw	1
   668  000A40  0100               	movlb	0	; () banked
   669  000A42  6F65               	movwf	sendByte@waitToTx& (0+255),b
   670  000A44  0E0D               	movlw	13
   671  000A46  EC0F  F009         	call	_sendByte
   672  000A4A  D7A0               	goto	l1725
   673  000A4C                     __end_of_main:
   674                           	opt stack 0
   675                           tblptru	equ	0xFF8
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           fsr1h	equ	0xFE2
   680                           fsr1l	equ	0xFE1
   681                           status	equ	0xFD8
   682                           
   683 ;; *************** function _strlen *****************
   684 ;; Defined at:
   685 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;  s               2   30[COMRAM] PTR const unsigned char 
   688 ;;		 -> STR_2(21), 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  cp              2   34[COMRAM] PTR const unsigned char 
   691 ;;		 -> STR_2(21), 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  2   30[COMRAM] unsigned int 
   694 ;; Registers used:
   695 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         2       0       0       0       0       0       0       0       0
   702 ;;      Locals:         2       0       0       0       0       0       0       0       0
   703 ;;      Temps:          2       0       0       0       0       0       0       0       0
   704 ;;      Totals:         6       0       0       0       0       0       0       0       0
   705 ;;Total ram usage:        6 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; Hardware stack levels required when called:    4
   708 ;; This function calls:
   709 ;;		Nothing
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text1
   716  001130                     __ptext1:
   717                           	opt stack 0
   718  001130                     _strlen:
   719                           	opt stack 26
   720                           
   721                           ;incstack = 0
   722  001130  C01F  F023         	movff	strlen@s,strlen@cp
   723  001134  C020  F024         	movff	strlen@s+1,strlen@cp+1
   724  001138  D002               	goto	l1413
   725  00113A                     l1411:
   726  00113A  4A23               	infsnz	strlen@cp,f,c
   727  00113C  2A24               	incf	strlen@cp+1,f,c
   728  00113E                     l1413:
   729  00113E  C023  FFF6         	movff	strlen@cp,tblptrl
   730  001142  C024  FFF7         	movff	strlen@cp+1,tblptrh
   731  001146                     	if	0	;tblptru may be non-zero
   732  001146                     	endif
   733  001146                     	if	0	;tblptru may be non-zero
   734  001146                     	endif
   735  001146  0008               	tblrd		*
   736  001148  50F5               	movf	tablat,w,c
   737  00114A  0900               	iorlw	0
   738  00114C  A4D8               	btfss	status,2,c
   739  00114E  D7F5               	goto	l1411
   740  001150  C01F  F021         	movff	strlen@s,??_strlen
   741  001154  C020  F022         	movff	strlen@s+1,??_strlen+1
   742  001158  1E21               	comf	??_strlen,f,c
   743  00115A  1E22               	comf	??_strlen+1,f,c
   744  00115C  4A21               	infsnz	??_strlen,f,c
   745  00115E  2A22               	incf	??_strlen+1,f,c
   746  001160  5023               	movf	strlen@cp,w,c
   747  001162  2421               	addwf	??_strlen,w,c
   748  001164  6E1F               	movwf	?_strlen,c
   749  001166  5024               	movf	strlen@cp+1,w,c
   750  001168  2022               	addwfc	??_strlen+1,w,c
   751  00116A  6E20               	movwf	?_strlen+1,c
   752  00116C  0012               	return	
   753  00116E                     __end_of_strlen:
   754                           	opt stack 0
   755                           tblptru	equ	0xFF8
   756                           tblptrh	equ	0xFF7
   757                           tblptrl	equ	0xFF6
   758                           tablat	equ	0xFF5
   759                           postinc0	equ	0xFEE
   760                           wreg	equ	0xFE8
   761                           postdec1	equ	0xFE5
   762                           fsr1h	equ	0xFE2
   763                           fsr1l	equ	0xFE1
   764                           status	equ	0xFD8
   765                           
   766 ;; *************** function _sendData *****************
   767 ;; Defined at:
   768 ;;		line 163 in file "uart.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  data            2   12[BANK0 ] PTR unsigned char 
   771 ;;		 -> main@recievedBuffer(100), STR_1(21), 
   772 ;;  size            2   14[BANK0 ] unsigned short 
   773 ;;  waitToTx        1   16[BANK0 ] unsigned char 
   774 ;; Auto vars:     Size  Location     Type
   775 ;;		None
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      unsigned char 
   778 ;; Registers used:
   779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   785 ;;      Params:         0       5       0       0       0       0       0       0       0
   786 ;;      Locals:         0       0       0       0       0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0       0       0       0       0
   788 ;;      Totals:         0       5       0       0       0       0       0       0       0
   789 ;;Total ram usage:        5 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    7
   792 ;; This function calls:
   793 ;;		_sendXData
   794 ;; This function is called by:
   795 ;;		_main
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           	psect	text2
   800  0011F8                     __ptext2:
   801                           	opt stack 0
   802  0011F8                     _sendData:
   803                           	opt stack 23
   804                           
   805                           ;uart.c: 164: return sendXData(data, size, waitToTx, &cbTX1);
   806                           ;	Return value of _sendData is never used
   807                           
   808                           ;incstack = 0
   809  0011F8  C06C  F060         	movff	sendData@data,sendXData@data
   810  0011FC  C06D  F061         	movff	sendData@data+1,sendXData@data+1
   811  001200  C06E  F062         	movff	sendData@size,sendXData@size
   812  001204  C06F  F063         	movff	sendData@size+1,sendXData@size+1
   813  001208  C070  F064         	movff	sendData@waitToTx,sendXData@waitToTx
   814  00120C  0E2D               	movlw	low _cbTX1
   815  00120E  0100               	movlb	0	; () banked
   816  001210  6F65               	movwf	sendXData@cbTX& (0+255),b
   817  001212  0E00               	movlw	high _cbTX1
   818  001214  0100               	movlb	0	; () banked
   819  001216  6F66               	movwf	(sendXData@cbTX+1)& (0+255),b
   820  001218  EC0C  F004         	call	_sendXData	;wreg free
   821  00121C  0012               	return	
   822  00121E                     __end_of_sendData:
   823                           	opt stack 0
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           postinc0	equ	0xFEE
   829                           wreg	equ	0xFE8
   830                           postdec1	equ	0xFE5
   831                           fsr1h	equ	0xFE2
   832                           fsr1l	equ	0xFE1
   833                           status	equ	0xFD8
   834                           
   835 ;; *************** function _sendXData *****************
   836 ;; Defined at:
   837 ;;		line 42 in file "uart.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;  data            2    0[BANK0 ] PTR unsigned char 
   840 ;;		 -> main@recievedBuffer(100), STR_1(21), 
   841 ;;  size            2    2[BANK0 ] unsigned short 
   842 ;;  waitToTx        1    4[BANK0 ] unsigned char 
   843 ;;  cbTX            2    5[BANK0 ] PTR struct .
   844 ;;		 -> cbTX1(10), 
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  index           2   10[BANK0 ] unsigned short 
   847 ;;  sizegiven       2    8[BANK0 ] unsigned short 
   848 ;;  ret             1    7[BANK0 ] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      unsigned char 
   851 ;; Registers used:
   852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   858 ;;      Params:         0       7       0       0       0       0       0       0       0
   859 ;;      Locals:         0       5       0       0       0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0       0       0
   861 ;;      Totals:         0      12       0       0       0       0       0       0       0
   862 ;;Total ram usage:       12 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    6
   865 ;; This function calls:
   866 ;;		_circularbIsFull
   867 ;;		_circularbNumElements
   868 ;;		_circularbWrite
   869 ;; This function is called by:
   870 ;;		_sendData
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text3
   875  000818                     __ptext3:
   876                           	opt stack 0
   877  000818                     _sendXData:
   878                           	opt stack 23
   879                           
   880                           ;uart.c: 43: char ret = 0;
   881                           
   882                           ;incstack = 0
   883  000818  0E00               	movlw	0
   884  00081A  0100               	movlb	0	; () banked
   885  00081C  6F67               	movwf	sendXData@ret& (0+255),b
   886                           
   887                           ;uart.c: 44: unsigned short index = 0;
   888  00081E  0E00               	movlw	0
   889  000820  0100               	movlb	0	; () banked
   890  000822  6F6B               	movwf	(sendXData@index+1)& (0+255),b
   891  000824  0E00               	movlw	0
   892  000826  6F6A               	movwf	sendXData@index& (0+255),b
   893                           
   894                           ; BSR set to: 0
   895                           ;uart.c: 45: unsigned short sizegiven;
   896                           ;uart.c: 47: sizegiven = (128 - circularbNumElements(cbTX)) < size ? (128 - circularbNum
      +                          Elements(cbTX)) : size;
   897  000828  C065  F01F         	movff	sendXData@cbTX,circularbNumElements@cb
   898  00082C  C066  F020         	movff	sendXData@cbTX+1,circularbNumElements@cb+1
   899  000830  EC2D  F009         	call	_circularbNumElements	;wreg free
   900  000834  1E1F               	comf	?_circularbNumElements,f,c
   901  000836  1E20               	comf	?_circularbNumElements+1,f,c
   902  000838  4A1F               	infsnz	?_circularbNumElements,f,c
   903  00083A  2A20               	incf	?_circularbNumElements+1,f,c
   904  00083C  0E80               	movlw	128
   905  00083E  261F               	addwf	?_circularbNumElements,f,c
   906  000840  0E00               	movlw	0
   907  000842  2220               	addwfc	?_circularbNumElements+1,f,c
   908  000844  0100               	movlb	0	; () banked
   909  000846  5162               	movf	sendXData@size& (0+255),w,b
   910  000848  5C1F               	subwf	?_circularbNumElements,w,c
   911  00084A  0100               	movlb	0	; () banked
   912  00084C  5163               	movf	(sendXData@size+1)& (0+255),w,b
   913  00084E  5820               	subwfb	?_circularbNumElements+1,w,c
   914  000850  A0D8               	btfss	status,0,c
   915  000852  D005               	goto	l1575
   916                           
   917                           ; BSR set to: 0
   918  000854  C062  F068         	movff	sendXData@size,sendXData@sizegiven
   919  000858  C063  F069         	movff	sendXData@size+1,sendXData@sizegiven+1
   920  00085C  D012               	goto	l1577
   921  00085E                     l1575:
   922                           
   923                           ; BSR set to: 0
   924  00085E  C065  F01F         	movff	sendXData@cbTX,circularbNumElements@cb
   925  000862  C066  F020         	movff	sendXData@cbTX+1,circularbNumElements@cb+1
   926  000866  EC2D  F009         	call	_circularbNumElements	;wreg free
   927  00086A  1E1F               	comf	?_circularbNumElements,f,c
   928  00086C  1E20               	comf	?_circularbNumElements+1,f,c
   929  00086E  4A1F               	infsnz	?_circularbNumElements,f,c
   930  000870  2A20               	incf	?_circularbNumElements+1,f,c
   931  000872  0E80               	movlw	128
   932  000874  241F               	addwf	?_circularbNumElements,w,c
   933  000876  0100               	movlb	0	; () banked
   934  000878  6F68               	movwf	sendXData@sizegiven& (0+255),b
   935  00087A  0E00               	movlw	0
   936  00087C  2020               	addwfc	?_circularbNumElements+1,w,c
   937  00087E  0100               	movlb	0	; () banked
   938  000880  6F69               	movwf	(sendXData@sizegiven+1)& (0+255),b
   939  000882                     l1577:
   940                           
   941                           ; BSR set to: 0
   942                           ;uart.c: 49: for (index = 0; index < sizegiven; index++) {
   943  000882  0E00               	movlw	0
   944  000884  0100               	movlb	0	; () banked
   945  000886  6F6B               	movwf	(sendXData@index+1)& (0+255),b
   946  000888  0E00               	movlw	0
   947  00088A  6F6A               	movwf	sendXData@index& (0+255),b
   948  00088C  D014               	goto	l1589
   949  00088E                     l1579:
   950                           
   951                           ; BSR set to: 0
   952                           ;uart.c: 50: circularbWrite(cbTX, (char *) data);
   953  00088E  C065  F025         	movff	sendXData@cbTX,circularbWrite@cb
   954  000892  C066  F026         	movff	sendXData@cbTX+1,circularbWrite@cb+1
   955  000896  C060  F027         	movff	sendXData@data,circularbWrite@element
   956  00089A  C061  F028         	movff	sendXData@data+1,circularbWrite@element+1
   957  00089E  EC26  F005         	call	_circularbWrite	;wreg free
   958                           
   959                           ;uart.c: 52: PIE1bits.TXIE = 0;
   960  0008A2  989D               	bcf	3997,4,c	;volatile
   961                           
   962                           ;uart.c: 53: if (TXSTAbits.TXEN == 0) TXSTAbits.TXEN = 1;
   963  0008A4  AAAC               	btfss	4012,5,c	;volatile
   964  0008A6  8AAC               	bsf	4012,5,c	;volatile
   965                           
   966                           ;uart.c: 54: PIE1bits.TXIE = 1;
   967  0008A8  889D               	bsf	3997,4,c	;volatile
   968                           
   969                           ;uart.c: 56: data++;
   970  0008AA  0100               	movlb	0	; () banked
   971  0008AC  4B60               	infsnz	sendXData@data& (0+255),f,b
   972  0008AE  2B61               	incf	(sendXData@data+1)& (0+255),f,b
   973  0008B0  0100               	movlb	0	; () banked
   974  0008B2  4B6A               	infsnz	sendXData@index& (0+255),f,b
   975  0008B4  2B6B               	incf	(sendXData@index+1)& (0+255),f,b
   976  0008B6                     l1589:
   977                           
   978                           ; BSR set to: 0
   979  0008B6  0100               	movlb	0	; () banked
   980  0008B8  5168               	movf	sendXData@sizegiven& (0+255),w,b
   981  0008BA  0100               	movlb	0	; () banked
   982  0008BC  5D6A               	subwf	sendXData@index& (0+255),w,b
   983  0008BE  0100               	movlb	0	; () banked
   984  0008C0  5169               	movf	(sendXData@sizegiven+1)& (0+255),w,b
   985  0008C2  0100               	movlb	0	; () banked
   986  0008C4  596B               	subwfb	(sendXData@index+1)& (0+255),w,b
   987  0008C6  B0D8               	btfsc	status,0,c
   988  0008C8  D01F               	goto	l1603
   989  0008CA  D7E1               	goto	l1579
   990  0008CC                     l1591:
   991  0008CC  C065  F01F         	movff	sendXData@cbTX,circularbIsFull@cb
   992  0008D0  C066  F020         	movff	sendXData@cbTX+1,circularbIsFull@cb+1
   993  0008D4  ECD7  F007         	call	_circularbIsFull	;wreg free
   994  0008D8  501F               	movf	?_circularbIsFull,w,c
   995  0008DA  1020               	iorwf	?_circularbIsFull+1,w,c
   996  0008DC  A4D8               	btfss	status,2,c
   997  0008DE  D7F6               	goto	l1591
   998                           
   999                           ;uart.c: 60: circularbWrite(cbTX, (char *) data);
  1000  0008E0  C065  F025         	movff	sendXData@cbTX,circularbWrite@cb
  1001  0008E4  C066  F026         	movff	sendXData@cbTX+1,circularbWrite@cb+1
  1002  0008E8  C060  F027         	movff	sendXData@data,circularbWrite@element
  1003  0008EC  C061  F028         	movff	sendXData@data+1,circularbWrite@element+1
  1004  0008F0  EC26  F005         	call	_circularbWrite	;wreg free
  1005                           
  1006                           ;uart.c: 62: PIE1bits.TXIE = 0;
  1007  0008F4  989D               	bcf	3997,4,c	;volatile
  1008                           
  1009                           ;uart.c: 63: if (TXSTAbits.TXEN == 0) TXSTAbits.TXEN = 1;
  1010  0008F6  AAAC               	btfss	4012,5,c	;volatile
  1011  0008F8  8AAC               	bsf	4012,5,c	;volatile
  1012                           
  1013                           ;uart.c: 64: PIE1bits.TXIE = 1;
  1014  0008FA  889D               	bsf	3997,4,c	;volatile
  1015                           
  1016                           ;uart.c: 66: data++;
  1017  0008FC  0100               	movlb	0	; () banked
  1018  0008FE  4B60               	infsnz	sendXData@data& (0+255),f,b
  1019  000900  2B61               	incf	(sendXData@data+1)& (0+255),f,b
  1020  000902  0100               	movlb	0	; () banked
  1021  000904  4B6A               	infsnz	sendXData@index& (0+255),f,b
  1022  000906  2B6B               	incf	(sendXData@index+1)& (0+255),f,b
  1023  000908                     l1603:
  1024                           
  1025                           ; BSR set to: 0
  1026  000908  0100               	movlb	0	; () banked
  1027  00090A  5162               	movf	sendXData@size& (0+255),w,b
  1028  00090C  0100               	movlb	0	; () banked
  1029  00090E  5D6A               	subwf	sendXData@index& (0+255),w,b
  1030  000910  0100               	movlb	0	; () banked
  1031  000912  5163               	movf	(sendXData@size+1)& (0+255),w,b
  1032  000914  0100               	movlb	0	; () banked
  1033  000916  596B               	subwfb	(sendXData@index+1)& (0+255),w,b
  1034  000918  A0D8               	btfss	status,0,c
  1035  00091A  D7D8               	goto	l1591
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;uart.c: 67: }
  1039                           ;uart.c: 69: if (waitToTx) while (TXSTAbits.TRMT == 0 && TXSTAbits.TXEN == 1);
  1040                           
  1041                           ; BSR set to: 0
  1042  00091C  0100               	movlb	0	; () banked
  1043  00091E  5164               	movf	sendXData@waitToTx& (0+255),w,b
  1044  000920  0100               	movlb	0	; () banked
  1045  000922  B4D8               	btfsc	status,2,c
  1046  000924  D004               	goto	l1611
  1047  000926                     l149:
  1048  000926  A2AC               	btfss	4012,1,c	;volatile
  1049  000928  AAAC               	btfss	4012,5,c	;volatile
  1050  00092A  D001               	goto	l1611
  1051  00092C  D7FC               	goto	l149
  1052  00092E                     l1611:
  1053                           
  1054                           ;uart.c: 70: return ret;
  1055  00092E  0100               	movlb	0	; () banked
  1056  000930  5167               	movf	sendXData@ret& (0+255),w,b
  1057  000932  0012               	return	
  1058  000934                     __end_of_sendXData:
  1059                           	opt stack 0
  1060                           tblptru	equ	0xFF8
  1061                           tblptrh	equ	0xFF7
  1062                           tblptrl	equ	0xFF6
  1063                           tablat	equ	0xFF5
  1064                           postinc0	equ	0xFEE
  1065                           wreg	equ	0xFE8
  1066                           postdec1	equ	0xFE5
  1067                           fsr1h	equ	0xFE2
  1068                           fsr1l	equ	0xFE1
  1069                           status	equ	0xFD8
  1070                           
  1071 ;; *************** function _sendByte *****************
  1072 ;; Defined at:
  1073 ;;		line 159 in file "uart.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  data            1    wreg     unsigned char 
  1076 ;;  waitToTx        1    5[BANK0 ] unsigned char 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  data            1    6[BANK0 ] unsigned char 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      unsigned char 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1088 ;;      Params:         0       1       0       0       0       0       0       0       0
  1089 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1091 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1092 ;;Total ram usage:        2 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    7
  1095 ;; This function calls:
  1096 ;;		_sendXByte
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text4
  1103  00121E                     __ptext4:
  1104                           	opt stack 0
  1105  00121E                     _sendByte:
  1106                           	opt stack 23
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;incstack = 0
  1110                           ;sendByte@data stored from wreg
  1111  00121E  0100               	movlb	0	; () banked
  1112  001220  6F66               	movwf	sendByte@data& (0+255),b
  1113                           
  1114                           ;uart.c: 160: return sendXByte(data, waitToTx, &cbTX1);
  1115                           ;	Return value of _sendByte is never used
  1116  001222  C065  F060         	movff	sendByte@waitToTx,sendXByte@waitToTx
  1117  001226  0E2D               	movlw	low _cbTX1
  1118  001228  0100               	movlb	0	; () banked
  1119  00122A  6F61               	movwf	sendXByte@cbTX& (0+255),b
  1120  00122C  0E00               	movlw	high _cbTX1
  1121  00122E  0100               	movlb	0	; () banked
  1122  001230  6F62               	movwf	(sendXByte@cbTX+1)& (0+255),b
  1123  001232  0100               	movlb	0	; () banked
  1124  001234  5166               	movf	sendByte@data& (0+255),w,b
  1125  001236  EC6C  F008         	call	_sendXByte
  1126  00123A  0012               	return	
  1127  00123C                     __end_of_sendByte:
  1128                           	opt stack 0
  1129                           tblptru	equ	0xFF8
  1130                           tblptrh	equ	0xFF7
  1131                           tblptrl	equ	0xFF6
  1132                           tablat	equ	0xFF5
  1133                           postinc0	equ	0xFEE
  1134                           wreg	equ	0xFE8
  1135                           postdec1	equ	0xFE5
  1136                           fsr1h	equ	0xFE2
  1137                           fsr1l	equ	0xFE1
  1138                           status	equ	0xFD8
  1139                           
  1140 ;; *************** function _sendXByte *****************
  1141 ;; Defined at:
  1142 ;;		line 28 in file "uart.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  data            1    wreg     unsigned char 
  1145 ;;  waitToTx        1    0[BANK0 ] unsigned char 
  1146 ;;  cbTX            2    1[BANK0 ] PTR struct .
  1147 ;;		 -> cbTX1(10), 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  data            1    3[BANK0 ] unsigned char 
  1150 ;;  ret             1    4[BANK0 ] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      unsigned char 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1160 ;;      Params:         0       3       0       0       0       0       0       0       0
  1161 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1163 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1164 ;;Total ram usage:        5 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    6
  1167 ;; This function calls:
  1168 ;;		_circularbIsFull
  1169 ;;		_circularbWrite
  1170 ;; This function is called by:
  1171 ;;		_sendByte
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text5
  1176  0010D8                     __ptext5:
  1177                           	opt stack 0
  1178  0010D8                     _sendXByte:
  1179                           	opt stack 23
  1180                           
  1181                           ;incstack = 0
  1182                           ;sendXByte@data stored from wreg
  1183  0010D8  0100               	movlb	0	; () banked
  1184  0010DA  6F63               	movwf	sendXByte@data& (0+255),b
  1185                           
  1186                           ;uart.c: 29: char ret = 0;
  1187  0010DC  0E00               	movlw	0
  1188  0010DE  0100               	movlb	0	; () banked
  1189  0010E0  6F64               	movwf	sendXByte@ret& (0+255),b
  1190  0010E2                     l1549:
  1191  0010E2  C061  F01F         	movff	sendXByte@cbTX,circularbIsFull@cb
  1192  0010E6  C062  F020         	movff	sendXByte@cbTX+1,circularbIsFull@cb+1
  1193  0010EA  ECD7  F007         	call	_circularbIsFull	;wreg free
  1194  0010EE  501F               	movf	?_circularbIsFull,w,c
  1195  0010F0  1020               	iorwf	?_circularbIsFull+1,w,c
  1196  0010F2  A4D8               	btfss	status,2,c
  1197  0010F4  D7F6               	goto	l1549
  1198                           
  1199                           ;uart.c: 32: ret = circularbWrite(cbTX, (char *) &data);
  1200  0010F6  C061  F025         	movff	sendXByte@cbTX,circularbWrite@cb
  1201  0010FA  C062  F026         	movff	sendXByte@cbTX+1,circularbWrite@cb+1
  1202  0010FE  0E63               	movlw	low sendXByte@data
  1203  001100  6E27               	movwf	circularbWrite@element,c
  1204  001102  0E00               	movlw	high sendXByte@data
  1205  001104  6E28               	movwf	circularbWrite@element+1,c
  1206  001106  EC26  F005         	call	_circularbWrite	;wreg free
  1207  00110A  5025               	movf	?_circularbWrite,w,c
  1208  00110C  0100               	movlb	0	; () banked
  1209  00110E  6F64               	movwf	sendXByte@ret& (0+255),b
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;uart.c: 34: PIE1bits.TXIE = 0;
  1213  001110  989D               	bcf	3997,4,c	;volatile
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;uart.c: 35: if (TXSTAbits.TXEN == 0) TXSTAbits.TXEN = 1;
  1217  001112  AAAC               	btfss	4012,5,c	;volatile
  1218                           
  1219                           ; BSR set to: 0
  1220  001114  8AAC               	bsf	4012,5,c	;volatile
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;uart.c: 36: PIE1bits.TXIE = 1;
  1224  001116  889D               	bsf	3997,4,c	;volatile
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;uart.c: 38: if (waitToTx) while (TXSTAbits.TRMT == 0 && TXSTAbits.TXEN == 1);
  1228  001118  0100               	movlb	0	; () banked
  1229  00111A  5160               	movf	sendXByte@waitToTx& (0+255),w,b
  1230  00111C  0100               	movlb	0	; () banked
  1231  00111E  B4D8               	btfsc	status,2,c
  1232  001120  D004               	goto	l1565
  1233  001122                     l125:
  1234  001122  A2AC               	btfss	4012,1,c	;volatile
  1235  001124  AAAC               	btfss	4012,5,c	;volatile
  1236  001126  D001               	goto	l1565
  1237  001128  D7FC               	goto	l125
  1238  00112A                     l1565:
  1239                           
  1240                           ;uart.c: 39: return ret;
  1241  00112A  0100               	movlb	0	; () banked
  1242  00112C  5164               	movf	sendXByte@ret& (0+255),w,b
  1243  00112E  0012               	return	
  1244  001130                     __end_of_sendXByte:
  1245                           	opt stack 0
  1246                           tblptru	equ	0xFF8
  1247                           tblptrh	equ	0xFF7
  1248                           tblptrl	equ	0xFF6
  1249                           tablat	equ	0xFF5
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           fsr1h	equ	0xFE2
  1254                           fsr1l	equ	0xFE1
  1255                           status	equ	0xFD8
  1256                           
  1257 ;; *************** function _circularbWrite *****************
  1258 ;; Defined at:
  1259 ;;		line 49 in file "cirBuffer.h"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;  cb              2   36[COMRAM] PTR struct .
  1262 ;;		 -> cbTX1(10), cbRC1(10), 
  1263 ;;  element         2   38[COMRAM] PTR unsigned char 
  1264 ;;		 -> handler_uart_int@readed(1), sendXByte@data(1), main@recievedBuffer(100), STR_1(21), 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  2   36[COMRAM] int 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1276 ;;      Params:         4       0       0       0       0       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1278 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1279 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1280 ;;Total ram usage:        8 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    5
  1283 ;; This function calls:
  1284 ;;		_circularbIsFull
  1285 ;; This function is called by:
  1286 ;;		_sendXByte
  1287 ;;		_sendXData
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text6
  1292  000A4C                     __ptext6:
  1293                           	opt stack 0
  1294  000A4C                     _circularbWrite:
  1295                           	opt stack 23
  1296                           
  1297                           ;cirBuffer.h: 50: if (circularbIsFull(cb)) return -1;
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;incstack = 0
  1301  000A4C  C025  F01F         	movff	circularbWrite@cb,circularbIsFull@cb
  1302  000A50  C026  F020         	movff	circularbWrite@cb+1,circularbIsFull@cb+1
  1303  000A54  ECD7  F007         	call	_circularbIsFull	;wreg free
  1304  000A58  501F               	movf	?_circularbIsFull,w,c
  1305  000A5A  1020               	iorwf	?_circularbIsFull+1,w,c
  1306  000A5C  B4D8               	btfsc	status,2,c
  1307  000A5E  D003               	goto	l1509
  1308  000A60  6825               	setf	?_circularbWrite,c
  1309  000A62  6826               	setf	?_circularbWrite+1,c
  1310  000A64  0012               	return	
  1311  000A66                     l1509:
  1312                           
  1313                           ;cirBuffer.h: 51: else {
  1314                           ;cirBuffer.h: 52: cb->buffer[cb->end] = *element;
  1315  000A66  C027  FFF6         	movff	circularbWrite@element,tblptrl
  1316  000A6A  C028  FFF7         	movff	circularbWrite@element+1,tblptrh
  1317  000A6E  6AF8               	clrf	tblptru,c
  1318  000A70  EE20 F002          	lfsr	2,2
  1319  000A74  5025               	movf	circularbWrite@cb,w,c
  1320  000A76  26D9               	addwf	fsr2l,f,c
  1321  000A78  5026               	movf	circularbWrite@cb+1,w,c
  1322  000A7A  22DA               	addwfc	fsr2h,f,c
  1323  000A7C  CFDE F029          	movff	postinc2,??_circularbWrite
  1324  000A80  CFDD F02A          	movff	postdec2,??_circularbWrite+1
  1325  000A84  EE20 F008          	lfsr	2,8
  1326  000A88  5025               	movf	circularbWrite@cb,w,c
  1327  000A8A  26D9               	addwf	fsr2l,f,c
  1328  000A8C  5026               	movf	circularbWrite@cb+1,w,c
  1329  000A8E  22DA               	addwfc	fsr2h,f,c
  1330  000A90  CFDE F02B          	movff	postinc2,??_circularbWrite+2
  1331  000A94  CFDD F02C          	movff	postdec2,??_circularbWrite+3
  1332  000A98  5029               	movf	??_circularbWrite,w,c
  1333  000A9A  242B               	addwf	??_circularbWrite+2,w,c
  1334  000A9C  6ED9               	movwf	fsr2l,c
  1335  000A9E  502A               	movf	??_circularbWrite+1,w,c
  1336  000AA0  202C               	addwfc	??_circularbWrite+3,w,c
  1337  000AA2  6EDA               	movwf	fsr2h,c
  1338  000AA4  0E07               	movlw	(high __ramtop+-1)
  1339  000AA6  64F7               	cpfsgt	tblptrh,c
  1340  000AA8  D003               	bra	u997
  1341  000AAA  0008               	tblrd		*
  1342  000AAC  50F5               	movf	tablat,w,c
  1343  000AAE  D005               	bra	u990
  1344  000AB0                     u997:
  1345  000AB0  CFF6 FFE1          	movff	tblptrl,fsr1l
  1346  000AB4  CFF7 FFE2          	movff	tblptrh,fsr1h
  1347  000AB8  50E7               	movf	indf1,w,c
  1348  000ABA                     u990:
  1349  000ABA  6EDF               	movwf	indf2,c
  1350                           
  1351                           ;cirBuffer.h: 53: cb->end = cb->end + 1;
  1352  000ABC  EE20 F002          	lfsr	2,2
  1353  000AC0  5025               	movf	circularbWrite@cb,w,c
  1354  000AC2  26D9               	addwf	fsr2l,f,c
  1355  000AC4  5026               	movf	circularbWrite@cb+1,w,c
  1356  000AC6  22DA               	addwfc	fsr2h,f,c
  1357  000AC8  CFDE F029          	movff	postinc2,??_circularbWrite
  1358  000ACC  CFDD F02A          	movff	postdec2,??_circularbWrite+1
  1359  000AD0  0E01               	movlw	1
  1360  000AD2  2629               	addwf	??_circularbWrite,f,c
  1361  000AD4  0E00               	movlw	0
  1362  000AD6  222A               	addwfc	??_circularbWrite+1,f,c
  1363  000AD8  EE20 F002          	lfsr	2,2
  1364  000ADC  5025               	movf	circularbWrite@cb,w,c
  1365  000ADE  26D9               	addwf	fsr2l,f,c
  1366  000AE0  5026               	movf	circularbWrite@cb+1,w,c
  1367  000AE2  22DA               	addwfc	fsr2h,f,c
  1368  000AE4  C029  FFDE         	movff	??_circularbWrite,postinc2
  1369  000AE8  C02A  FFDD         	movff	??_circularbWrite+1,postdec2
  1370                           
  1371                           ;cirBuffer.h: 54: if (cb->end == cb->size) cb->end = 0;
  1372  000AEC  EE20 F004          	lfsr	2,4
  1373  000AF0  5025               	movf	circularbWrite@cb,w,c
  1374  000AF2  26D9               	addwf	fsr2l,f,c
  1375  000AF4  5026               	movf	circularbWrite@cb+1,w,c
  1376  000AF6  22DA               	addwfc	fsr2h,f,c
  1377  000AF8  EE10 F002          	lfsr	1,2
  1378  000AFC  5025               	movf	circularbWrite@cb,w,c
  1379  000AFE  26E1               	addwf	fsr1l,f,c
  1380  000B00  5026               	movf	circularbWrite@cb+1,w,c
  1381  000B02  22E2               	addwfc	fsr1h,f,c
  1382  000B04  50DE               	movf	postinc2,w,c
  1383  000B06  18E6               	xorwf	postinc1,w,c
  1384  000B08  E10E               	bnz	l110
  1385  000B0A  50DE               	movf	postinc2,w,c
  1386  000B0C  18E6               	xorwf	postinc1,w,c
  1387  000B0E  A4D8               	btfss	status,2,c
  1388  000B10  D00A               	goto	l110
  1389  000B12  EE20 F002          	lfsr	2,2
  1390  000B16  5025               	movf	circularbWrite@cb,w,c
  1391  000B18  26D9               	addwf	fsr2l,f,c
  1392  000B1A  5026               	movf	circularbWrite@cb+1,w,c
  1393  000B1C  22DA               	addwfc	fsr2h,f,c
  1394  000B1E  0E00               	movlw	0
  1395  000B20  6EDE               	movwf	postinc2,c
  1396  000B22  0E00               	movlw	0
  1397  000B24  6EDD               	movwf	postdec2,c
  1398  000B26                     l110:
  1399                           
  1400                           ;cirBuffer.h: 55: cb->numelem++;
  1401  000B26  EE20 F006          	lfsr	2,6
  1402  000B2A  5025               	movf	circularbWrite@cb,w,c
  1403  000B2C  26D9               	addwf	fsr2l,f,c
  1404  000B2E  5026               	movf	circularbWrite@cb+1,w,c
  1405  000B30  22DA               	addwfc	fsr2h,f,c
  1406  000B32  2ADE               	incf	postinc2,f,c
  1407  000B34  0E00               	movlw	0
  1408  000B36  22DD               	addwfc	postdec2,f,c
  1409                           
  1410                           ;cirBuffer.h: 56: return 0;
  1411  000B38  0E00               	movlw	0
  1412  000B3A  6E26               	movwf	?_circularbWrite+1,c
  1413  000B3C  0E00               	movlw	0
  1414  000B3E  6E25               	movwf	?_circularbWrite,c
  1415  000B40  0012               	return	
  1416  000B42                     __end_of_circularbWrite:
  1417                           	opt stack 0
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           indf1	equ	0xFE7
  1425                           postinc1	equ	0xFE6
  1426                           postdec1	equ	0xFE5
  1427                           fsr1h	equ	0xFE2
  1428                           fsr1l	equ	0xFE1
  1429                           indf2	equ	0xFDF
  1430                           postinc2	equ	0xFDE
  1431                           postdec2	equ	0xFDD
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _circularbIsFull *****************
  1437 ;; Defined at:
  1438 ;;		line 35 in file "cirBuffer.h"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  cb              2   30[COMRAM] PTR struct .
  1441 ;;		 -> cbTX1(10), cbRC1(10), 
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;  aux             2   34[COMRAM] unsigned int 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  2   30[COMRAM] int 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1453 ;;      Params:         2       0       0       0       0       0       0       0       0
  1454 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1455 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1456 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1457 ;;Total ram usage:        6 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    4
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_circularbWrite
  1464 ;;		_sendXByte
  1465 ;;		_sendXData
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text7
  1470  000FAE                     __ptext7:
  1471                           	opt stack 0
  1472  000FAE                     _circularbIsFull:
  1473                           	opt stack 23
  1474                           
  1475                           ;cirBuffer.h: 36: unsigned int aux = cb->end + 1;
  1476                           
  1477                           ;incstack = 0
  1478  000FAE  EE20 F002          	lfsr	2,2
  1479  000FB2  501F               	movf	circularbIsFull@cb,w,c
  1480  000FB4  26D9               	addwf	fsr2l,f,c
  1481  000FB6  5020               	movf	circularbIsFull@cb+1,w,c
  1482  000FB8  22DA               	addwfc	fsr2h,f,c
  1483  000FBA  CFDE F021          	movff	postinc2,??_circularbIsFull
  1484  000FBE  CFDD F022          	movff	postdec2,??_circularbIsFull+1
  1485  000FC2  0E01               	movlw	1
  1486  000FC4  2421               	addwf	??_circularbIsFull,w,c
  1487  000FC6  6E23               	movwf	circularbIsFull@aux,c
  1488  000FC8  0E00               	movlw	0
  1489  000FCA  2022               	addwfc	??_circularbIsFull+1,w,c
  1490  000FCC  6E24               	movwf	circularbIsFull@aux+1,c
  1491                           
  1492                           ;cirBuffer.h: 37: if (aux == cb->size) aux = 0;
  1493  000FCE  EE20 F004          	lfsr	2,4
  1494  000FD2  501F               	movf	circularbIsFull@cb,w,c
  1495  000FD4  26D9               	addwf	fsr2l,f,c
  1496  000FD6  5020               	movf	circularbIsFull@cb+1,w,c
  1497  000FD8  22DA               	addwfc	fsr2h,f,c
  1498  000FDA  5023               	movf	circularbIsFull@aux,w,c
  1499  000FDC  18DE               	xorwf	postinc2,w,c
  1500  000FDE  E108               	bnz	l1491
  1501  000FE0  5024               	movf	circularbIsFull@aux+1,w,c
  1502  000FE2  18DE               	xorwf	postinc2,w,c
  1503  000FE4  A4D8               	btfss	status,2,c
  1504  000FE6  D004               	goto	l1491
  1505  000FE8  0E00               	movlw	0
  1506  000FEA  6E24               	movwf	circularbIsFull@aux+1,c
  1507  000FEC  0E00               	movlw	0
  1508  000FEE  6E23               	movwf	circularbIsFull@aux,c
  1509  000FF0                     l1491:
  1510                           
  1511                           ;cirBuffer.h: 38: return (aux == cb->start);
  1512  000FF0  C01F  FFD9         	movff	circularbIsFull@cb,fsr2l
  1513  000FF4  C020  FFDA         	movff	circularbIsFull@cb+1,fsr2h
  1514  000FF8  5023               	movf	circularbIsFull@aux,w,c
  1515  000FFA  18DE               	xorwf	postinc2,w,c
  1516  000FFC  E106               	bnz	u940
  1517  000FFE  5024               	movf	circularbIsFull@aux+1,w,c
  1518  001000  18DE               	xorwf	postinc2,w,c
  1519  001002  A4D8               	btfss	status,2,c
  1520  001004  D002               	goto	u940
  1521  001006  0E01               	movlw	1
  1522  001008  D001               	goto	u950
  1523  00100A                     u940:
  1524  00100A  0E00               	movlw	0
  1525  00100C                     u950:
  1526  00100C  6E1F               	movwf	?_circularbIsFull,c
  1527  00100E  6A20               	clrf	?_circularbIsFull+1,c
  1528  001010  0012               	return	
  1529  001012                     __end_of_circularbIsFull:
  1530                           	opt stack 0
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           indf1	equ	0xFE7
  1538                           postinc1	equ	0xFE6
  1539                           postdec1	equ	0xFE5
  1540                           fsr1h	equ	0xFE2
  1541                           fsr1l	equ	0xFE1
  1542                           indf2	equ	0xFDF
  1543                           postinc2	equ	0xFDE
  1544                           postdec2	equ	0xFDD
  1545                           fsr2h	equ	0xFDA
  1546                           fsr2l	equ	0xFD9
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _readData *****************
  1550 ;; Defined at:
  1551 ;;		line 171 in file "uart.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;  data            2    5[BANK0 ] PTR unsigned char 
  1554 ;;		 -> main@recievedBuffer(100), 
  1555 ;;  size            2    7[BANK0 ] unsigned short 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      unsigned char 
  1560 ;; Registers used:
  1561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1567 ;;      Params:         0       4       0       0       0       0       0       0       0
  1568 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1570 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1571 ;;Total ram usage:        4 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    6
  1574 ;; This function calls:
  1575 ;;		_readXData
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text8
  1582  00123C                     __ptext8:
  1583                           	opt stack 0
  1584  00123C                     _readData:
  1585                           	opt stack 24
  1586                           
  1587                           ;uart.c: 172: return readXData(data, size, &cbRC1);
  1588                           ;	Return value of _readData is never used
  1589                           
  1590                           ;incstack = 0
  1591  00123C  C065  F027         	movff	readData@data,readXData@data
  1592  001240  C066  F028         	movff	readData@data+1,readXData@data+1
  1593  001244  C067  F029         	movff	readData@size,readXData@size
  1594  001248  C068  F02A         	movff	readData@size+1,readXData@size+1
  1595  00124C  0E37               	movlw	low _cbRC1
  1596  00124E  6E2B               	movwf	readXData@cbRC,c
  1597  001250  0E00               	movlw	high _cbRC1
  1598  001252  6E2C               	movwf	readXData@cbRC+1,c
  1599  001254  EC15  F006         	call	_readXData	;wreg free
  1600  001258  0012               	return	
  1601  00125A                     __end_of_readData:
  1602                           	opt stack 0
  1603                           tblptru	equ	0xFF8
  1604                           tblptrh	equ	0xFF7
  1605                           tblptrl	equ	0xFF6
  1606                           tablat	equ	0xFF5
  1607                           postinc0	equ	0xFEE
  1608                           wreg	equ	0xFE8
  1609                           indf1	equ	0xFE7
  1610                           postinc1	equ	0xFE6
  1611                           postdec1	equ	0xFE5
  1612                           fsr1h	equ	0xFE2
  1613                           fsr1l	equ	0xFE1
  1614                           indf2	equ	0xFDF
  1615                           postinc2	equ	0xFDE
  1616                           postdec2	equ	0xFDD
  1617                           fsr2h	equ	0xFDA
  1618                           fsr2l	equ	0xFD9
  1619                           status	equ	0xFD8
  1620                           
  1621 ;; *************** function _readXData *****************
  1622 ;; Defined at:
  1623 ;;		line 80 in file "uart.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;  data            2   38[COMRAM] PTR unsigned char 
  1626 ;;		 -> main@recievedBuffer(100), 
  1627 ;;  size            2   40[COMRAM] unsigned short 
  1628 ;;  cbRC            2   42[COMRAM] PTR struct .
  1629 ;;		 -> cbRC1(10), 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  index           2    3[BANK0 ] unsigned short 
  1632 ;;  sizegiven       2    1[BANK0 ] unsigned short 
  1633 ;;  ret             1    0[BANK0 ] unsigned char 
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  1    wreg      unsigned char 
  1636 ;; Registers used:
  1637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1643 ;;      Params:         6       0       0       0       0       0       0       0       0
  1644 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1646 ;;      Totals:         6       5       0       0       0       0       0       0       0
  1647 ;;Total ram usage:       11 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    5
  1650 ;; This function calls:
  1651 ;;		_circularbIsEmpty
  1652 ;;		_circularbNumElements
  1653 ;;		_circularbRead
  1654 ;; This function is called by:
  1655 ;;		_readData
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text9
  1660  000C2A                     __ptext9:
  1661                           	opt stack 0
  1662  000C2A                     _readXData:
  1663                           	opt stack 24
  1664                           
  1665                           ;uart.c: 81: char ret = 0;
  1666                           
  1667                           ;incstack = 0
  1668  000C2A  0E00               	movlw	0
  1669  000C2C  0100               	movlb	0	; () banked
  1670  000C2E  6F60               	movwf	readXData@ret& (0+255),b
  1671                           
  1672                           ;uart.c: 82: unsigned short index = 0;
  1673  000C30  0E00               	movlw	0
  1674  000C32  0100               	movlb	0	; () banked
  1675  000C34  6F64               	movwf	(readXData@index+1)& (0+255),b
  1676  000C36  0E00               	movlw	0
  1677  000C38  6F63               	movwf	readXData@index& (0+255),b
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;uart.c: 83: unsigned short sizegiven;
  1681                           ;uart.c: 85: sizegiven = circularbNumElements(cbRC) < size ? circularbNumElements(cbRC) 
      +                          : size;
  1682  000C3A  C02B  F01F         	movff	readXData@cbRC,circularbNumElements@cb
  1683  000C3E  C02C  F020         	movff	readXData@cbRC+1,circularbNumElements@cb+1
  1684  000C42  EC2D  F009         	call	_circularbNumElements	;wreg free
  1685  000C46  5029               	movf	readXData@size,w,c
  1686  000C48  5C1F               	subwf	?_circularbNumElements,w,c
  1687  000C4A  502A               	movf	readXData@size+1,w,c
  1688  000C4C  5820               	subwfb	?_circularbNumElements+1,w,c
  1689  000C4E  A0D8               	btfss	status,0,c
  1690  000C50  D005               	goto	l1621
  1691  000C52  C029  F061         	movff	readXData@size,readXData@sizegiven
  1692  000C56  C02A  F062         	movff	readXData@size+1,readXData@sizegiven+1
  1693  000C5A  D00A               	goto	l1623
  1694  000C5C                     l1621:
  1695  000C5C  C02B  F01F         	movff	readXData@cbRC,circularbNumElements@cb
  1696  000C60  C02C  F020         	movff	readXData@cbRC+1,circularbNumElements@cb+1
  1697  000C64  EC2D  F009         	call	_circularbNumElements	;wreg free
  1698  000C68  C01F  F061         	movff	?_circularbNumElements,readXData@sizegiven
  1699  000C6C  C020  F062         	movff	?_circularbNumElements+1,readXData@sizegiven+1
  1700  000C70                     l1623:
  1701                           
  1702                           ;uart.c: 86: for (index = 0; index < sizegiven; index++) {
  1703  000C70  0E00               	movlw	0
  1704  000C72  0100               	movlb	0	; () banked
  1705  000C74  6F64               	movwf	(readXData@index+1)& (0+255),b
  1706  000C76  0E00               	movlw	0
  1707  000C78  6F63               	movwf	readXData@index& (0+255),b
  1708  000C7A  D00F               	goto	l1631
  1709  000C7C                     l1625:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;uart.c: 87: circularbRead(cbRC, (char *) data);
  1713  000C7C  C02B  F01F         	movff	readXData@cbRC,circularbRead@cb
  1714  000C80  C02C  F020         	movff	readXData@cbRC+1,circularbRead@cb+1
  1715  000C84  C027  F021         	movff	readXData@data,circularbRead@element
  1716  000C88  C028  F022         	movff	readXData@data+1,circularbRead@element+1
  1717  000C8C  EC7C  F006         	call	_circularbRead	;wreg free
  1718                           
  1719                           ;uart.c: 88: data++;
  1720  000C90  4A27               	infsnz	readXData@data,f,c
  1721  000C92  2A28               	incf	readXData@data+1,f,c
  1722  000C94  0100               	movlb	0	; () banked
  1723  000C96  4B63               	infsnz	readXData@index& (0+255),f,b
  1724  000C98  2B64               	incf	(readXData@index+1)& (0+255),f,b
  1725  000C9A                     l1631:
  1726                           
  1727                           ; BSR set to: 0
  1728  000C9A  0100               	movlb	0	; () banked
  1729  000C9C  5161               	movf	readXData@sizegiven& (0+255),w,b
  1730  000C9E  0100               	movlb	0	; () banked
  1731  000CA0  5D63               	subwf	readXData@index& (0+255),w,b
  1732  000CA2  0100               	movlb	0	; () banked
  1733  000CA4  5162               	movf	(readXData@sizegiven+1)& (0+255),w,b
  1734  000CA6  0100               	movlb	0	; () banked
  1735  000CA8  5964               	subwfb	(readXData@index+1)& (0+255),w,b
  1736  000CAA  B0D8               	btfsc	status,0,c
  1737  000CAC  D01A               	goto	l1641
  1738  000CAE  D7E6               	goto	l1625
  1739  000CB0                     l1633:
  1740  000CB0  C02B  F01F         	movff	readXData@cbRC,circularbIsEmpty@cb
  1741  000CB4  C02C  F020         	movff	readXData@cbRC+1,circularbIsEmpty@cb+1
  1742  000CB8  ECCE  F008         	call	_circularbIsEmpty	;wreg free
  1743  000CBC  501F               	movf	?_circularbIsEmpty,w,c
  1744  000CBE  1020               	iorwf	?_circularbIsEmpty+1,w,c
  1745  000CC0  A4D8               	btfss	status,2,c
  1746  000CC2  D7F6               	goto	l1633
  1747                           
  1748                           ;uart.c: 92: circularbRead(cbRC, (char *) data);
  1749  000CC4  C02B  F01F         	movff	readXData@cbRC,circularbRead@cb
  1750  000CC8  C02C  F020         	movff	readXData@cbRC+1,circularbRead@cb+1
  1751  000CCC  C027  F021         	movff	readXData@data,circularbRead@element
  1752  000CD0  C028  F022         	movff	readXData@data+1,circularbRead@element+1
  1753  000CD4  EC7C  F006         	call	_circularbRead	;wreg free
  1754                           
  1755                           ;uart.c: 93: data++;
  1756  000CD8  4A27               	infsnz	readXData@data,f,c
  1757  000CDA  2A28               	incf	readXData@data+1,f,c
  1758  000CDC  0100               	movlb	0	; () banked
  1759  000CDE  4B63               	infsnz	readXData@index& (0+255),f,b
  1760  000CE0  2B64               	incf	(readXData@index+1)& (0+255),f,b
  1761  000CE2                     l1641:
  1762                           
  1763                           ; BSR set to: 0
  1764  000CE2  5029               	movf	readXData@size,w,c
  1765  000CE4  0100               	movlb	0	; () banked
  1766  000CE6  5D63               	subwf	readXData@index& (0+255),w,b
  1767  000CE8  502A               	movf	readXData@size+1,w,c
  1768  000CEA  0100               	movlb	0	; () banked
  1769  000CEC  5964               	subwfb	(readXData@index+1)& (0+255),w,b
  1770  000CEE  A0D8               	btfss	status,0,c
  1771  000CF0  D7DF               	goto	l1633
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;uart.c: 94: }
  1775                           ;uart.c: 96: return ret;
  1776                           
  1777                           ; BSR set to: 0
  1778  000CF2  0100               	movlb	0	; () banked
  1779  000CF4  5160               	movf	readXData@ret& (0+255),w,b
  1780  000CF6  0012               	return	
  1781  000CF8                     __end_of_readXData:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           indf1	equ	0xFE7
  1790                           postinc1	equ	0xFE6
  1791                           postdec1	equ	0xFE5
  1792                           fsr1h	equ	0xFE2
  1793                           fsr1l	equ	0xFE1
  1794                           indf2	equ	0xFDF
  1795                           postinc2	equ	0xFDE
  1796                           postdec2	equ	0xFDD
  1797                           fsr2h	equ	0xFDA
  1798                           fsr2l	equ	0xFD9
  1799                           status	equ	0xFD8
  1800                           
  1801 ;; *************** function _circularbRead *****************
  1802 ;; Defined at:
  1803 ;;		line 60 in file "cirBuffer.h"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  cb              2   30[COMRAM] PTR struct .
  1806 ;;		 -> cbTX1(10), cbRC1(10), 
  1807 ;;  element         2   32[COMRAM] PTR unsigned char 
  1808 ;;		 -> handler_uart_int@toTransmit(1), main@recievedBuffer(100), 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;		None
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  2   30[COMRAM] int 
  1813 ;; Registers used:
  1814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1820 ;;      Params:         4       0       0       0       0       0       0       0       0
  1821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1822 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1823 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1824 ;;Total ram usage:        8 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    4
  1827 ;; This function calls:
  1828 ;;		Nothing
  1829 ;; This function is called by:
  1830 ;;		_readXData
  1831 ;;		_readXByte
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text10
  1836  000CF8                     __ptext10:
  1837                           	opt stack 0
  1838  000CF8                     _circularbRead:
  1839                           	opt stack 24
  1840                           
  1841                           ;cirBuffer.h: 61: *element = cb->buffer[cb->start];
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;incstack = 0
  1845  000CF8  C01F  FFD9         	movff	circularbRead@cb,fsr2l
  1846  000CFC  C020  FFDA         	movff	circularbRead@cb+1,fsr2h
  1847  000D00  CFDE F023          	movff	postinc2,??_circularbRead
  1848  000D04  CFDD F024          	movff	postdec2,??_circularbRead+1
  1849  000D08  EE20 F008          	lfsr	2,8
  1850  000D0C  501F               	movf	circularbRead@cb,w,c
  1851  000D0E  26D9               	addwf	fsr2l,f,c
  1852  000D10  5020               	movf	circularbRead@cb+1,w,c
  1853  000D12  22DA               	addwfc	fsr2h,f,c
  1854  000D14  CFDE F025          	movff	postinc2,??_circularbRead+2
  1855  000D18  CFDD F026          	movff	postdec2,??_circularbRead+3
  1856  000D1C  5023               	movf	??_circularbRead,w,c
  1857  000D1E  2425               	addwf	??_circularbRead+2,w,c
  1858  000D20  6ED9               	movwf	fsr2l,c
  1859  000D22  5024               	movf	??_circularbRead+1,w,c
  1860  000D24  2026               	addwfc	??_circularbRead+3,w,c
  1861  000D26  6EDA               	movwf	fsr2h,c
  1862  000D28  C021  FFE1         	movff	circularbRead@element,fsr1l
  1863  000D2C  C022  FFE2         	movff	circularbRead@element+1,fsr1h
  1864  000D30  CFDF FFE7          	movff	indf2,indf1
  1865                           
  1866                           ;cirBuffer.h: 62: cb->start = cb->start + 1;
  1867  000D34  C01F  FFD9         	movff	circularbRead@cb,fsr2l
  1868  000D38  C020  FFDA         	movff	circularbRead@cb+1,fsr2h
  1869  000D3C  CFDE F023          	movff	postinc2,??_circularbRead
  1870  000D40  CFDD F024          	movff	postdec2,??_circularbRead+1
  1871  000D44  0E01               	movlw	1
  1872  000D46  2623               	addwf	??_circularbRead,f,c
  1873  000D48  0E00               	movlw	0
  1874  000D4A  2224               	addwfc	??_circularbRead+1,f,c
  1875  000D4C  C01F  FFD9         	movff	circularbRead@cb,fsr2l
  1876  000D50  C020  FFDA         	movff	circularbRead@cb+1,fsr2h
  1877  000D54  C023  FFDE         	movff	??_circularbRead,postinc2
  1878  000D58  C024  FFDD         	movff	??_circularbRead+1,postdec2
  1879                           
  1880                           ;cirBuffer.h: 63: if (cb->start == cb->size) cb->start = 0;
  1881  000D5C  EE20 F004          	lfsr	2,4
  1882  000D60  501F               	movf	circularbRead@cb,w,c
  1883  000D62  26D9               	addwf	fsr2l,f,c
  1884  000D64  5020               	movf	circularbRead@cb+1,w,c
  1885  000D66  22DA               	addwfc	fsr2h,f,c
  1886  000D68  C01F  FFE1         	movff	circularbRead@cb,fsr1l
  1887  000D6C  C020  FFE2         	movff	circularbRead@cb+1,fsr1h
  1888  000D70  50DE               	movf	postinc2,w,c
  1889  000D72  18E6               	xorwf	postinc1,w,c
  1890  000D74  E10C               	bnz	l1529
  1891  000D76  50DE               	movf	postinc2,w,c
  1892  000D78  18E6               	xorwf	postinc1,w,c
  1893  000D7A  A4D8               	btfss	status,2,c
  1894  000D7C  D008               	goto	l1529
  1895  000D7E  C01F  FFD9         	movff	circularbRead@cb,fsr2l
  1896  000D82  C020  FFDA         	movff	circularbRead@cb+1,fsr2h
  1897  000D86  0E00               	movlw	0
  1898  000D88  6EDE               	movwf	postinc2,c
  1899  000D8A  0E00               	movlw	0
  1900  000D8C  6EDD               	movwf	postdec2,c
  1901  000D8E                     l1529:
  1902                           
  1903                           ;cirBuffer.h: 64: cb->numelem--;
  1904  000D8E  EE20 F006          	lfsr	2,6
  1905  000D92  501F               	movf	circularbRead@cb,w,c
  1906  000D94  26D9               	addwf	fsr2l,f,c
  1907  000D96  5020               	movf	circularbRead@cb+1,w,c
  1908  000D98  22DA               	addwfc	fsr2h,f,c
  1909  000D9A  06DE               	decf	postinc2,f,c
  1910  000D9C  0E00               	movlw	0
  1911  000D9E  5ADD               	subwfb	postdec2,f,c
  1912                           
  1913                           ;cirBuffer.h: 65: return 0;
  1914  000DA0  0E00               	movlw	0
  1915  000DA2  6E20               	movwf	?_circularbRead+1,c
  1916  000DA4  0E00               	movlw	0
  1917  000DA6  6E1F               	movwf	?_circularbRead,c
  1918  000DA8  0012               	return	
  1919  000DAA                     __end_of_circularbRead:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           indf1	equ	0xFE7
  1928                           postinc1	equ	0xFE6
  1929                           postdec1	equ	0xFE5
  1930                           fsr1h	equ	0xFE2
  1931                           fsr1l	equ	0xFE1
  1932                           indf2	equ	0xFDF
  1933                           postinc2	equ	0xFDE
  1934                           postdec2	equ	0xFDD
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _circularbIsEmpty *****************
  1940 ;; Defined at:
  1941 ;;		line 45 in file "cirBuffer.h"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  cb              2   30[COMRAM] PTR struct .
  1944 ;;		 -> cbTX1(10), cbRC1(10), 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  2   30[COMRAM] int 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1956 ;;      Params:         2       0       0       0       0       0       0       0       0
  1957 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1958 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1959 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1960 ;;Total ram usage:        6 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    4
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_readXData
  1967 ;;		_readXByte
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text11
  1972  00119C                     __ptext11:
  1973                           	opt stack 0
  1974  00119C                     _circularbIsEmpty:
  1975                           	opt stack 24
  1976                           
  1977                           ;cirBuffer.h: 46: return cb->end == cb->start;
  1978                           
  1979                           ;incstack = 0
  1980  00119C  C01F  FFD9         	movff	circularbIsEmpty@cb,fsr2l
  1981  0011A0  C020  FFDA         	movff	circularbIsEmpty@cb+1,fsr2h
  1982  0011A4  EE10 F002          	lfsr	1,2
  1983  0011A8  501F               	movf	circularbIsEmpty@cb,w,c
  1984  0011AA  26E1               	addwf	fsr1l,f,c
  1985  0011AC  5020               	movf	circularbIsEmpty@cb+1,w,c
  1986  0011AE  22E2               	addwfc	fsr1h,f,c
  1987  0011B0  50DE               	movf	postinc2,w,c
  1988  0011B2  18E6               	xorwf	postinc1,w,c
  1989  0011B4  E106               	bnz	u960
  1990  0011B6  50DE               	movf	postinc2,w,c
  1991  0011B8  18E6               	xorwf	postinc1,w,c
  1992  0011BA  A4D8               	btfss	status,2,c
  1993  0011BC  D002               	goto	u960
  1994  0011BE  0E01               	movlw	1
  1995  0011C0  D001               	goto	u970
  1996  0011C2                     u960:
  1997  0011C2  0E00               	movlw	0
  1998  0011C4                     u970:
  1999  0011C4  6E1F               	movwf	?_circularbIsEmpty,c
  2000  0011C6  6A20               	clrf	?_circularbIsEmpty+1,c
  2001  0011C8  0012               	return	
  2002  0011CA                     __end_of_circularbIsEmpty:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           postinc0	equ	0xFEE
  2009                           wreg	equ	0xFE8
  2010                           indf1	equ	0xFE7
  2011                           postinc1	equ	0xFE6
  2012                           postdec1	equ	0xFE5
  2013                           fsr1h	equ	0xFE2
  2014                           fsr1l	equ	0xFE1
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _initUart *****************
  2023 ;; Defined at:
  2024 ;;		line 106 in file "uart.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2038 ;;      Params:         0       0       0       0       0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2041 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2042 ;;Total ram usage:        0 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    5
  2045 ;; This function calls:
  2046 ;;		_circularbInit
  2047 ;; This function is called by:
  2048 ;;		_main
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text12
  2053  000ECE                     __ptext12:
  2054                           	opt stack 0
  2055  000ECE                     _initUart:
  2056                           	opt stack 25
  2057                           
  2058                           ;uart.c: 110: TX9 = 0;
  2059                           
  2060                           ;incstack = 0
  2061  000ECE  9CAC               	bcf	4012,6,c	;volatile
  2062                           
  2063                           ;uart.c: 111: TXSTAbits.TXEN = 0;
  2064  000ED0  9AAC               	bcf	4012,5,c	;volatile
  2065                           
  2066                           ;uart.c: 112: SYNC = 0;
  2067  000ED2  98AC               	bcf	4012,4,c	;volatile
  2068                           
  2069                           ;uart.c: 113: SENDB = 0;
  2070  000ED4  96AC               	bcf	4012,3,c	;volatile
  2071                           
  2072                           ;uart.c: 114: BRGH = 1;
  2073  000ED6  84AC               	bsf	4012,2,c	;volatile
  2074                           
  2075                           ;uart.c: 116: SPEN = 1;
  2076  000ED8  8EAB               	bsf	4011,7,c	;volatile
  2077                           
  2078                           ;uart.c: 117: RX9 = 0;
  2079  000EDA  9CAB               	bcf	4011,6,c	;volatile
  2080                           
  2081                           ;uart.c: 118: CREN = 1;
  2082  000EDC  88AB               	bsf	4011,4,c	;volatile
  2083                           
  2084                           ;uart.c: 119: ADDEN = 0;
  2085  000EDE  96AB               	bcf	4011,3,c	;volatile
  2086                           
  2087                           ;uart.c: 121: RXDTP = 0;
  2088  000EE0  9AB8               	bcf	4024,5,c	;volatile
  2089                           
  2090                           ;uart.c: 122: TXCKP = 0;
  2091  000EE2  98B8               	bcf	4024,4,c	;volatile
  2092                           
  2093                           ;uart.c: 123: BRG16 = 1;
  2094  000EE4  86B8               	bsf	4024,3,c	;volatile
  2095                           
  2096                           ;uart.c: 124: WUE = 0;
  2097  000EE6  92B8               	bcf	4024,1,c	;volatile
  2098                           
  2099                           ;uart.c: 125: ABDEN = 0;
  2100  000EE8  90B8               	bcf	4024,0,c	;volatile
  2101                           
  2102                           ;uart.c: 132: SPBRGH = 0x04;
  2103  000EEA  0E04               	movlw	4
  2104  000EEC  6EB0               	movwf	4016,c	;volatile
  2105                           
  2106                           ;uart.c: 133: SPBRG = 0xE1;
  2107  000EEE  0EE1               	movlw	225
  2108  000EF0  6EAF               	movwf	4015,c	;volatile
  2109                           
  2110                           ;uart.c: 135: TRISC7 = 1;
  2111  000EF2  8E94               	bsf	3988,7,c	;volatile
  2112                           
  2113                           ;uart.c: 136: TRISC6 = 0;
  2114  000EF4  9C94               	bcf	3988,6,c	;volatile
  2115                           
  2116                           ;uart.c: 140: circularbInit(&cbRC1, buff_rc1, 128);
  2117  000EF6  0E37               	movlw	low _cbRC1
  2118  000EF8  6E1F               	movwf	circularbInit@cb,c
  2119  000EFA  0E00               	movlw	high _cbRC1
  2120  000EFC  6E20               	movwf	circularbInit@cb+1,c
  2121  000EFE  0E80               	movlw	low _buff_rc1
  2122  000F00  6E21               	movwf	circularbInit@buf,c
  2123  000F02  0E01               	movlw	high _buff_rc1
  2124  000F04  6E22               	movwf	circularbInit@buf+1,c
  2125  000F06  0E00               	movlw	0
  2126  000F08  6E24               	movwf	circularbInit@size+1,c
  2127  000F0A  0E80               	movlw	128
  2128  000F0C  6E23               	movwf	circularbInit@size,c
  2129  000F0E  EC3B  F008         	call	_circularbInit	;wreg free
  2130                           
  2131                           ;uart.c: 141: circularbInit(&cbTX1, buff_tx1, 128);
  2132  000F12  0E2D               	movlw	low _cbTX1
  2133  000F14  6E1F               	movwf	circularbInit@cb,c
  2134  000F16  0E00               	movlw	high _cbTX1
  2135  000F18  6E20               	movwf	circularbInit@cb+1,c
  2136  000F1A  0E00               	movlw	low _buff_tx1
  2137  000F1C  6E21               	movwf	circularbInit@buf,c
  2138  000F1E  0E01               	movlw	high _buff_tx1
  2139  000F20  6E22               	movwf	circularbInit@buf+1,c
  2140  000F22  0E00               	movlw	0
  2141  000F24  6E24               	movwf	circularbInit@size+1,c
  2142  000F26  0E80               	movlw	128
  2143  000F28  6E23               	movwf	circularbInit@size,c
  2144  000F2A  EC3B  F008         	call	_circularbInit	;wreg free
  2145                           
  2146                           ;uart.c: 145: PIE1bits.TXIE = 1;
  2147  000F2E  889D               	bsf	3997,4,c	;volatile
  2148                           
  2149                           ;uart.c: 146: RCIE = 1;
  2150  000F30  8A9D               	bsf	3997,5,c	;volatile
  2151                           
  2152                           ;uart.c: 147: RCIP = 1;
  2153  000F32  8A9F               	bsf	3999,5,c	;volatile
  2154                           
  2155                           ;uart.c: 148: TXIP = 1;
  2156  000F34  889F               	bsf	3999,4,c	;volatile
  2157                           
  2158                           ;uart.c: 150: IPEN = 1;
  2159  000F36  8ED0               	bsf	4048,7,c	;volatile
  2160                           
  2161                           ;uart.c: 151: GIE = 1;
  2162  000F38  8EF2               	bsf	intcon,7,c	;volatile
  2163                           
  2164                           ;uart.c: 152: PEIE = 1;
  2165  000F3A  8CF2               	bsf	intcon,6,c	;volatile
  2166  000F3C  0012               	return		;funcret
  2167  000F3E                     __end_of_initUart:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           intcon	equ	0xFF2
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           indf1	equ	0xFE7
  2177                           postinc1	equ	0xFE6
  2178                           postdec1	equ	0xFE5
  2179                           fsr1h	equ	0xFE2
  2180                           fsr1l	equ	0xFE1
  2181                           indf2	equ	0xFDF
  2182                           postinc2	equ	0xFDE
  2183                           postdec2	equ	0xFDD
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _circularbInit *****************
  2189 ;; Defined at:
  2190 ;;		line 22 in file "cirBuffer.h"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  cb              2   30[COMRAM] PTR struct .
  2193 ;;		 -> cbTX1(10), cbRC1(10), 
  2194 ;;  buf             2   32[COMRAM] PTR unsigned char 
  2195 ;;		 -> buff_tx1(128), buff_rc1(128), 
  2196 ;;  size            2   34[COMRAM] int 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;		None
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2208 ;;      Params:         6       0       0       0       0       0       0       0       0
  2209 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2211 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2212 ;;Total ram usage:        6 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    4
  2215 ;; This function calls:
  2216 ;;		Nothing
  2217 ;; This function is called by:
  2218 ;;		_initUart
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text13
  2223  001076                     __ptext13:
  2224                           	opt stack 0
  2225  001076                     _circularbInit:
  2226                           	opt stack 25
  2227                           
  2228                           ;cirBuffer.h: 23: cb->buffer = buf;
  2229                           
  2230                           ;incstack = 0
  2231  001076  EE20 F008          	lfsr	2,8
  2232  00107A  501F               	movf	circularbInit@cb,w,c
  2233  00107C  26D9               	addwf	fsr2l,f,c
  2234  00107E  5020               	movf	circularbInit@cb+1,w,c
  2235  001080  22DA               	addwfc	fsr2h,f,c
  2236  001082  C021  FFDE         	movff	circularbInit@buf,postinc2
  2237  001086  C022  FFDD         	movff	circularbInit@buf+1,postdec2
  2238                           
  2239                           ;cirBuffer.h: 24: cb->start = 0;
  2240  00108A  C01F  FFD9         	movff	circularbInit@cb,fsr2l
  2241  00108E  C020  FFDA         	movff	circularbInit@cb+1,fsr2h
  2242  001092  0E00               	movlw	0
  2243  001094  6EDE               	movwf	postinc2,c
  2244  001096  0E00               	movlw	0
  2245  001098  6EDD               	movwf	postdec2,c
  2246                           
  2247                           ;cirBuffer.h: 25: cb->end = 0;
  2248  00109A  EE20 F002          	lfsr	2,2
  2249  00109E  501F               	movf	circularbInit@cb,w,c
  2250  0010A0  26D9               	addwf	fsr2l,f,c
  2251  0010A2  5020               	movf	circularbInit@cb+1,w,c
  2252  0010A4  22DA               	addwfc	fsr2h,f,c
  2253  0010A6  0E00               	movlw	0
  2254  0010A8  6EDE               	movwf	postinc2,c
  2255  0010AA  0E00               	movlw	0
  2256  0010AC  6EDD               	movwf	postdec2,c
  2257                           
  2258                           ;cirBuffer.h: 26: cb->size = size;
  2259  0010AE  EE20 F004          	lfsr	2,4
  2260  0010B2  501F               	movf	circularbInit@cb,w,c
  2261  0010B4  26D9               	addwf	fsr2l,f,c
  2262  0010B6  5020               	movf	circularbInit@cb+1,w,c
  2263  0010B8  22DA               	addwfc	fsr2h,f,c
  2264  0010BA  C023  FFDE         	movff	circularbInit@size,postinc2
  2265  0010BE  C024  FFDD         	movff	circularbInit@size+1,postdec2
  2266                           
  2267                           ;cirBuffer.h: 27: cb->numelem = 0;
  2268  0010C2  EE20 F006          	lfsr	2,6
  2269  0010C6  501F               	movf	circularbInit@cb,w,c
  2270  0010C8  26D9               	addwf	fsr2l,f,c
  2271  0010CA  5020               	movf	circularbInit@cb+1,w,c
  2272  0010CC  22DA               	addwfc	fsr2h,f,c
  2273  0010CE  0E00               	movlw	0
  2274  0010D0  6EDE               	movwf	postinc2,c
  2275  0010D2  0E00               	movlw	0
  2276  0010D4  6EDD               	movwf	postdec2,c
  2277  0010D6  0012               	return		;funcret
  2278  0010D8                     __end_of_circularbInit:
  2279                           	opt stack 0
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           intcon	equ	0xFF2
  2285                           postinc0	equ	0xFEE
  2286                           wreg	equ	0xFE8
  2287                           indf1	equ	0xFE7
  2288                           postinc1	equ	0xFE6
  2289                           postdec1	equ	0xFE5
  2290                           fsr1h	equ	0xFE2
  2291                           fsr1l	equ	0xFE1
  2292                           indf2	equ	0xFDF
  2293                           postinc2	equ	0xFDE
  2294                           postdec2	equ	0xFDD
  2295                           fsr2h	equ	0xFDA
  2296                           fsr2l	equ	0xFD9
  2297                           status	equ	0xFD8
  2298                           
  2299 ;; *************** function _dataAvailable *****************
  2300 ;; Defined at:
  2301 ;;		line 155 in file "uart.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      unsigned char 
  2308 ;; Registers used:
  2309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2315 ;;      Params:         0       0       0       0       0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2318 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    6
  2322 ;; This function calls:
  2323 ;;		_dataXAvailable
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text14
  2330  001280                     __ptext14:
  2331                           	opt stack 0
  2332  001280                     _dataAvailable:
  2333                           	opt stack 24
  2334                           
  2335                           ;uart.c: 156: return dataXAvailable(&cbRC1);
  2336                           
  2337                           ;incstack = 0
  2338  001280  0E37               	movlw	low _cbRC1
  2339  001282  6E21               	movwf	dataXAvailable@cbRC,c
  2340  001284  0E00               	movlw	high _cbRC1
  2341  001286  6E22               	movwf	dataXAvailable@cbRC+1,c
  2342  001288  EC38  F009         	call	_dataXAvailable	;wreg free
  2343  00128C  0012               	return	
  2344  00128E                     __end_of_dataAvailable:
  2345                           	opt stack 0
  2346                           tblptru	equ	0xFF8
  2347                           tblptrh	equ	0xFF7
  2348                           tblptrl	equ	0xFF6
  2349                           tablat	equ	0xFF5
  2350                           intcon	equ	0xFF2
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           indf1	equ	0xFE7
  2354                           postinc1	equ	0xFE6
  2355                           postdec1	equ	0xFE5
  2356                           fsr1h	equ	0xFE2
  2357                           fsr1l	equ	0xFE1
  2358                           indf2	equ	0xFDF
  2359                           postinc2	equ	0xFDE
  2360                           postdec2	equ	0xFDD
  2361                           fsr2h	equ	0xFDA
  2362                           fsr2l	equ	0xFD9
  2363                           status	equ	0xFD8
  2364                           
  2365 ;; *************** function _dataXAvailable *****************
  2366 ;; Defined at:
  2367 ;;		line 24 in file "uart.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  cbRC            2   32[COMRAM] PTR struct .
  2370 ;;		 -> cbRC1(10), 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      unsigned char 
  2375 ;; Registers used:
  2376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2382 ;;      Params:         2       0       0       0       0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2385 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2386 ;;Total ram usage:        2 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    5
  2389 ;; This function calls:
  2390 ;;		_circularbNumElements
  2391 ;; This function is called by:
  2392 ;;		_dataAvailable
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text15
  2397  001270                     __ptext15:
  2398                           	opt stack 0
  2399  001270                     _dataXAvailable:
  2400                           	opt stack 24
  2401                           
  2402                           ;uart.c: 25: return circularbNumElements(cbRC);
  2403                           
  2404                           ;incstack = 0
  2405  001270  C021  F01F         	movff	dataXAvailable@cbRC,circularbNumElements@cb
  2406  001274  C022  F020         	movff	dataXAvailable@cbRC+1,circularbNumElements@cb+1
  2407  001278  EC2D  F009         	call	_circularbNumElements	;wreg free
  2408  00127C  501F               	movf	?_circularbNumElements,w,c
  2409  00127E  0012               	return	
  2410  001280                     __end_of_dataXAvailable:
  2411                           	opt stack 0
  2412                           tblptru	equ	0xFF8
  2413                           tblptrh	equ	0xFF7
  2414                           tblptrl	equ	0xFF6
  2415                           tablat	equ	0xFF5
  2416                           intcon	equ	0xFF2
  2417                           postinc0	equ	0xFEE
  2418                           wreg	equ	0xFE8
  2419                           indf1	equ	0xFE7
  2420                           postinc1	equ	0xFE6
  2421                           postdec1	equ	0xFE5
  2422                           fsr1h	equ	0xFE2
  2423                           fsr1l	equ	0xFE1
  2424                           indf2	equ	0xFDF
  2425                           postinc2	equ	0xFDE
  2426                           postdec2	equ	0xFDD
  2427                           fsr2h	equ	0xFDA
  2428                           fsr2l	equ	0xFD9
  2429                           status	equ	0xFD8
  2430                           
  2431 ;; *************** function _circularbNumElements *****************
  2432 ;; Defined at:
  2433 ;;		line 41 in file "cirBuffer.h"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  cb              2   30[COMRAM] PTR struct .
  2436 ;;		 -> cbTX1(10), cbRC1(10), 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;		None
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  2   30[COMRAM] int 
  2441 ;; Registers used:
  2442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2448 ;;      Params:         2       0       0       0       0       0       0       0       0
  2449 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2451 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2452 ;;Total ram usage:        2 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    4
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_dataXAvailable
  2459 ;;		_sendXData
  2460 ;;		_readXData
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text16
  2465  00125A                     __ptext16:
  2466                           	opt stack 0
  2467  00125A                     _circularbNumElements:
  2468                           	opt stack 24
  2469                           
  2470                           ;cirBuffer.h: 42: return cb->numelem;
  2471                           
  2472                           ;incstack = 0
  2473  00125A  EE20 F006          	lfsr	2,6
  2474  00125E  501F               	movf	circularbNumElements@cb,w,c
  2475  001260  26D9               	addwf	fsr2l,f,c
  2476  001262  5020               	movf	circularbNumElements@cb+1,w,c
  2477  001264  22DA               	addwfc	fsr2h,f,c
  2478  001266  CFDE F01F          	movff	postinc2,?_circularbNumElements
  2479  00126A  CFDD F020          	movff	postdec2,?_circularbNumElements+1
  2480  00126E  0012               	return	
  2481  001270                     __end_of_circularbNumElements:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           intcon	equ	0xFF2
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           indf1	equ	0xFE7
  2491                           postinc1	equ	0xFE6
  2492                           postdec1	equ	0xFE5
  2493                           fsr1h	equ	0xFE2
  2494                           fsr1l	equ	0xFE1
  2495                           indf2	equ	0xFDF
  2496                           postinc2	equ	0xFDE
  2497                           postdec2	equ	0xFDD
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _ISR *****************
  2503 ;; Defined at:
  2504 ;;		line 88 in file "infraRedProject.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2520 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2521 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2522 ;;Total ram usage:       14 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    3
  2525 ;; This function calls:
  2526 ;;		_handler_uart_int
  2527 ;; This function is called by:
  2528 ;;		Interrupt level 2
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	intcode
  2533  000008                     __pintcode:
  2534                           	opt stack 0
  2535  000008                     _ISR:
  2536                           	opt stack 23
  2537                           
  2538                           ;incstack = 0
  2539  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2540  00000A  ED2A  F007         	call	int_func,f	;refresh shadow registers
  2541                           tblptru	equ	0xFF8
  2542                           tblptrh	equ	0xFF7
  2543                           tblptrl	equ	0xFF6
  2544                           tablat	equ	0xFF5
  2545                           intcon	equ	0xFF2
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           indf1	equ	0xFE7
  2549                           postinc1	equ	0xFE6
  2550                           postdec1	equ	0xFE5
  2551                           fsr1h	equ	0xFE2
  2552                           fsr1l	equ	0xFE1
  2553                           indf2	equ	0xFDF
  2554                           postinc2	equ	0xFDE
  2555                           postdec2	equ	0xFDD
  2556                           fsr2h	equ	0xFDA
  2557                           fsr2l	equ	0xFD9
  2558                           status	equ	0xFD8
  2559                           
  2560                           	psect	intcode_body
  2561  000E54                     __pintcode_body:
  2562                           	opt stack 23
  2563  000E54                     int_func:
  2564                           	opt stack 23
  2565  000E54  0006               	pop		; remove dummy address from shadow register refresh
  2566  000E56  CFFA F011          	movff	pclath,??_ISR
  2567  000E5A  CFFB F012          	movff	pclatu,??_ISR+1
  2568  000E5E  CFE9 F013          	movff	fsr0l,??_ISR+2
  2569  000E62  CFEA F014          	movff	fsr0h,??_ISR+3
  2570  000E66  CFE1 F015          	movff	fsr1l,??_ISR+4
  2571  000E6A  CFE2 F016          	movff	fsr1h,??_ISR+5
  2572  000E6E  CFD9 F017          	movff	fsr2l,??_ISR+6
  2573  000E72  CFDA F018          	movff	fsr2h,??_ISR+7
  2574  000E76  CFF3 F019          	movff	prodl,??_ISR+8
  2575  000E7A  CFF4 F01A          	movff	prodh,??_ISR+9
  2576  000E7E  CFF6 F01B          	movff	tblptrl,??_ISR+10
  2577  000E82  CFF7 F01C          	movff	tblptrh,??_ISR+11
  2578  000E86  CFF8 F01D          	movff	tblptru,??_ISR+12
  2579  000E8A  CFF5 F01E          	movff	tablat,??_ISR+13
  2580                           
  2581                           ;infraRedProject.c: 89: handler_uart_int();
  2582  000E8E  EC9F  F007         	call	_handler_uart_int	;wreg free
  2583  000E92  C01E  FFF5         	movff	??_ISR+13,tablat
  2584  000E96  C01D  FFF8         	movff	??_ISR+12,tblptru
  2585  000E9A  C01C  FFF7         	movff	??_ISR+11,tblptrh
  2586  000E9E  C01B  FFF6         	movff	??_ISR+10,tblptrl
  2587  000EA2  C01A  FFF4         	movff	??_ISR+9,prodh
  2588  000EA6  C019  FFF3         	movff	??_ISR+8,prodl
  2589  000EAA  C018  FFDA         	movff	??_ISR+7,fsr2h
  2590  000EAE  C017  FFD9         	movff	??_ISR+6,fsr2l
  2591  000EB2  C016  FFE2         	movff	??_ISR+5,fsr1h
  2592  000EB6  C015  FFE1         	movff	??_ISR+4,fsr1l
  2593  000EBA  C014  FFEA         	movff	??_ISR+3,fsr0h
  2594  000EBE  C013  FFE9         	movff	??_ISR+2,fsr0l
  2595  000EC2  C012  FFFB         	movff	??_ISR+1,pclatu
  2596  000EC6  C011  FFFA         	movff	??_ISR,pclath
  2597  000ECA  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2598  000ECC  0011               	retfie		f
  2599  000ECE                     __end_of_ISR:
  2600                           	opt stack 0
  2601                           pclatu	equ	0xFFB
  2602                           pclath	equ	0xFFA
  2603                           tblptru	equ	0xFF8
  2604                           tblptrh	equ	0xFF7
  2605                           tblptrl	equ	0xFF6
  2606                           tablat	equ	0xFF5
  2607                           prodh	equ	0xFF4
  2608                           prodl	equ	0xFF3
  2609                           intcon	equ	0xFF2
  2610                           postinc0	equ	0xFEE
  2611                           fsr0h	equ	0xFEA
  2612                           fsr0l	equ	0xFE9
  2613                           wreg	equ	0xFE8
  2614                           indf1	equ	0xFE7
  2615                           postinc1	equ	0xFE6
  2616                           postdec1	equ	0xFE5
  2617                           fsr1h	equ	0xFE2
  2618                           fsr1l	equ	0xFE1
  2619                           indf2	equ	0xFDF
  2620                           postinc2	equ	0xFDE
  2621                           postdec2	equ	0xFDD
  2622                           fsr2h	equ	0xFDA
  2623                           fsr2l	equ	0xFD9
  2624                           status	equ	0xFD8
  2625                           
  2626 ;; *************** function _handler_uart_int *****************
  2627 ;; Defined at:
  2628 ;;		line 175 in file "uart.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;		None
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  toTransmit      1   15[COMRAM] unsigned char 
  2633 ;;  readed          1   14[COMRAM] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0
  2644 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2646 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2647 ;;Total ram usage:        2 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    2
  2650 ;; This function calls:
  2651 ;;		i2_circularbIsEmpty
  2652 ;;		i2_circularbIsFull
  2653 ;;		i2_circularbRead
  2654 ;;		i2_circularbWrite
  2655 ;; This function is called by:
  2656 ;;		_ISR
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text18
  2661  000F3E                     __ptext18:
  2662                           	opt stack 0
  2663  000F3E                     _handler_uart_int:
  2664                           	opt stack 23
  2665                           
  2666                           ;uart.c: 176: unsigned char toTransmit, readed;
  2667                           ;uart.c: 177: if (TXIF == 1 && PIE1bits.TXIE == 1) {
  2668                           
  2669                           ;incstack = 0
  2670  000F3E  B89E               	btfsc	3998,4,c	;volatile
  2671  000F40  A89D               	btfss	3997,4,c	;volatile
  2672  000F42  D019               	goto	i2l205
  2673                           
  2674                           ;uart.c: 178: if (!circularbIsEmpty(&cbTX1)) {
  2675  000F44  0E2D               	movlw	low _cbTX1
  2676  000F46  6E01               	movwf	i2circularbIsEmpty@cb,c
  2677  000F48  0E00               	movlw	high _cbTX1
  2678  000F4A  6E02               	movwf	i2circularbIsEmpty@cb+1,c
  2679  000F4C  ECE5  F008         	call	i2_circularbIsEmpty	;wreg free
  2680  000F50  5001               	movf	?i2_circularbIsEmpty,w,c
  2681  000F52  1002               	iorwf	?i2_circularbIsEmpty+1,w,c
  2682  000F54  A4D8               	btfss	status,2,c
  2683  000F56  D00D               	goto	i2l206
  2684                           
  2685                           ;uart.c: 179: circularbRead(&cbTX1, (char *) &toTransmit);
  2686  000F58  0E2D               	movlw	low _cbTX1
  2687  000F5A  6E01               	movwf	i2circularbRead@cb,c
  2688  000F5C  0E00               	movlw	high _cbTX1
  2689  000F5E  6E02               	movwf	i2circularbRead@cb+1,c
  2690  000F60  0E10               	movlw	low handler_uart_int@toTransmit
  2691  000F62  6E03               	movwf	i2circularbRead@element,c
  2692  000F64  0E00               	movlw	high handler_uart_int@toTransmit
  2693  000F66  6E04               	movwf	i2circularbRead@element+1,c
  2694  000F68  ECD5  F006         	call	i2_circularbRead	;wreg free
  2695                           
  2696                           ;uart.c: 180: TXREG = toTransmit;
  2697  000F6C  C010  FFAD         	movff	handler_uart_int@toTransmit,4013	;volatile
  2698                           
  2699                           ;uart.c: 181: } else {
  2700  000F70  D002               	goto	i2l205
  2701  000F72                     i2l206:
  2702                           
  2703                           ;uart.c: 182: if (TXSTAbits.TRMT) TXSTAbits.TXEN = 0;
  2704  000F72  B2AC               	btfsc	4012,1,c	;volatile
  2705  000F74  9AAC               	bcf	4012,5,c	;volatile
  2706  000F76                     i2l205:
  2707                           
  2708                           ;uart.c: 183: }
  2709                           ;uart.c: 184: }
  2710                           ;uart.c: 186: if (RCIF == 1 && RCIE == 1) {
  2711  000F76  AA9E               	btfss	3998,5,c	;volatile
  2712  000F78  0012               	return	
  2713  000F7A  AA9D               	btfss	3997,5,c	;volatile
  2714  000F7C  0012               	return	
  2715                           
  2716                           ;uart.c: 187: readed = RCREG;
  2717  000F7E  CFAE F00F          	movff	4014,handler_uart_int@readed	;volatile
  2718                           
  2719                           ;uart.c: 188: if (!circularbIsFull(&cbRC1)) {
  2720  000F82  0E37               	movlw	low _cbRC1
  2721  000F84  6E01               	movwf	i2circularbIsFull@cb,c
  2722  000F86  0E00               	movlw	high _cbRC1
  2723  000F88  6E02               	movwf	i2circularbIsFull@cb+1,c
  2724  000F8A  EC09  F008         	call	i2_circularbIsFull	;wreg free
  2725  000F8E  5001               	movf	?i2_circularbIsFull,w,c
  2726  000F90  1002               	iorwf	?i2_circularbIsFull+1,w,c
  2727  000F92  A4D8               	btfss	status,2,c
  2728  000F94  D00A               	goto	i2l1683
  2729                           
  2730                           ;uart.c: 189: circularbWrite(&cbRC1, (char *) &readed);
  2731  000F96  0E37               	movlw	low _cbRC1
  2732  000F98  6E07               	movwf	i2circularbWrite@cb,c
  2733  000F9A  0E00               	movlw	high _cbRC1
  2734  000F9C  6E08               	movwf	i2circularbWrite@cb+1,c
  2735  000F9E  0E0F               	movlw	low handler_uart_int@readed
  2736  000FA0  6E09               	movwf	i2circularbWrite@element,c
  2737  000FA2  0E00               	movlw	high handler_uart_int@readed
  2738  000FA4  6E0A               	movwf	i2circularbWrite@element+1,c
  2739  000FA6  ECA1  F005         	call	i2_circularbWrite	;wreg free
  2740  000FAA                     i2l1683:
  2741                           
  2742                           ;uart.c: 190: }
  2743                           ;uart.c: 191: RCIF = 0;
  2744  000FAA  9A9E               	bcf	3998,5,c	;volatile
  2745  000FAC  0012               	return	
  2746  000FAE                     __end_of_handler_uart_int:
  2747                           	opt stack 0
  2748                           pclatu	equ	0xFFB
  2749                           pclath	equ	0xFFA
  2750                           tblptru	equ	0xFF8
  2751                           tblptrh	equ	0xFF7
  2752                           tblptrl	equ	0xFF6
  2753                           tablat	equ	0xFF5
  2754                           prodh	equ	0xFF4
  2755                           prodl	equ	0xFF3
  2756                           intcon	equ	0xFF2
  2757                           postinc0	equ	0xFEE
  2758                           fsr0h	equ	0xFEA
  2759                           fsr0l	equ	0xFE9
  2760                           wreg	equ	0xFE8
  2761                           indf1	equ	0xFE7
  2762                           postinc1	equ	0xFE6
  2763                           postdec1	equ	0xFE5
  2764                           fsr1h	equ	0xFE2
  2765                           fsr1l	equ	0xFE1
  2766                           indf2	equ	0xFDF
  2767                           postinc2	equ	0xFDE
  2768                           postdec2	equ	0xFDD
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function i2_circularbWrite *****************
  2774 ;; Defined at:
  2775 ;;		line 49 in file "cirBuffer.h"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  cb              2    6[COMRAM] PTR struct .
  2778 ;;		 -> cbTX1(10), cbRC1(10), 
  2779 ;;  element         2    8[COMRAM] PTR unsigned char 
  2780 ;;		 -> handler_uart_int@readed(1), sendXByte@data(1), main@recievedBuffer(100), STR_1(21), 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  2    6[COMRAM] int 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2792 ;;      Params:         4       0       0       0       0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2794 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2795 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2796 ;;Total ram usage:        8 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    1
  2799 ;; This function calls:
  2800 ;;		i2_circularbIsFull
  2801 ;; This function is called by:
  2802 ;;		_handler_uart_int
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text19
  2807  000B42                     __ptext19:
  2808                           	opt stack 0
  2809  000B42                     i2_circularbWrite:
  2810                           	opt stack 23
  2811                           
  2812                           ;cirBuffer.h: 50: if (circularbIsFull(cb)) return -1;
  2813                           
  2814                           ;incstack = 0
  2815  000B42  C007  F001         	movff	i2circularbWrite@cb,i2circularbIsFull@cb
  2816  000B46  C008  F002         	movff	i2circularbWrite@cb+1,i2circularbIsFull@cb+1
  2817  000B4A  EC09  F008         	call	i2_circularbIsFull	;wreg free
  2818  000B4E  5001               	movf	?i2_circularbIsFull,w,c
  2819  000B50  1002               	iorwf	?i2_circularbIsFull+1,w,c
  2820  000B52  A4D8               	btfss	status,2,c
  2821  000B54  0012               	return	
  2822                           
  2823                           ;cirBuffer.h: 51: else {
  2824                           ;cirBuffer.h: 52: cb->buffer[cb->end] = *element;
  2825                           
  2826                           ;	Return value of i2_circularbWrite is never used
  2827  000B56  C009  FFF6         	movff	i2circularbWrite@element,tblptrl
  2828  000B5A  C00A  FFF7         	movff	i2circularbWrite@element+1,tblptrh
  2829  000B5E  6AF8               	clrf	tblptru,c
  2830  000B60  EE20 F002          	lfsr	2,2
  2831  000B64  5007               	movf	i2circularbWrite@cb,w,c
  2832  000B66  26D9               	addwf	fsr2l,f,c
  2833  000B68  5008               	movf	i2circularbWrite@cb+1,w,c
  2834  000B6A  22DA               	addwfc	fsr2h,f,c
  2835  000B6C  CFDE F00B          	movff	postinc2,??i2_circularbWrite
  2836  000B70  CFDD F00C          	movff	postdec2,??i2_circularbWrite+1
  2837  000B74  EE20 F008          	lfsr	2,8
  2838  000B78  5007               	movf	i2circularbWrite@cb,w,c
  2839  000B7A  26D9               	addwf	fsr2l,f,c
  2840  000B7C  5008               	movf	i2circularbWrite@cb+1,w,c
  2841  000B7E  22DA               	addwfc	fsr2h,f,c
  2842  000B80  CFDE F00D          	movff	postinc2,??i2_circularbWrite+2
  2843  000B84  CFDD F00E          	movff	postdec2,??i2_circularbWrite+3
  2844  000B88  500B               	movf	??i2_circularbWrite,w,c
  2845  000B8A  240D               	addwf	??i2_circularbWrite+2,w,c
  2846  000B8C  6ED9               	movwf	fsr2l,c
  2847  000B8E  500C               	movf	??i2_circularbWrite+1,w,c
  2848  000B90  200E               	addwfc	??i2_circularbWrite+3,w,c
  2849  000B92  6EDA               	movwf	fsr2h,c
  2850  000B94  0E07               	movlw	(high __ramtop+-1)
  2851  000B96  64F7               	cpfsgt	tblptrh,c
  2852  000B98  D003               	bra	i2u124_47
  2853  000B9A  0008               	tblrd		*
  2854  000B9C  50F5               	movf	tablat,w,c
  2855  000B9E  D005               	bra	i2u124_40
  2856  000BA0                     i2u124_47:
  2857  000BA0  CFF6 FFE1          	movff	tblptrl,fsr1l
  2858  000BA4  CFF7 FFE2          	movff	tblptrh,fsr1h
  2859  000BA8  50E7               	movf	indf1,w,c
  2860  000BAA                     i2u124_40:
  2861  000BAA  6EDF               	movwf	indf2,c
  2862                           
  2863                           ;cirBuffer.h: 53: cb->end = cb->end + 1;
  2864  000BAC  EE20 F002          	lfsr	2,2
  2865  000BB0  5007               	movf	i2circularbWrite@cb,w,c
  2866  000BB2  26D9               	addwf	fsr2l,f,c
  2867  000BB4  5008               	movf	i2circularbWrite@cb+1,w,c
  2868  000BB6  22DA               	addwfc	fsr2h,f,c
  2869  000BB8  CFDE F00B          	movff	postinc2,??i2_circularbWrite
  2870  000BBC  CFDD F00C          	movff	postdec2,??i2_circularbWrite+1
  2871  000BC0  0E01               	movlw	1
  2872  000BC2  260B               	addwf	??i2_circularbWrite,f,c
  2873  000BC4  0E00               	movlw	0
  2874  000BC6  220C               	addwfc	??i2_circularbWrite+1,f,c
  2875  000BC8  EE20 F002          	lfsr	2,2
  2876  000BCC  5007               	movf	i2circularbWrite@cb,w,c
  2877  000BCE  26D9               	addwf	fsr2l,f,c
  2878  000BD0  5008               	movf	i2circularbWrite@cb+1,w,c
  2879  000BD2  22DA               	addwfc	fsr2h,f,c
  2880  000BD4  C00B  FFDE         	movff	??i2_circularbWrite,postinc2
  2881  000BD8  C00C  FFDD         	movff	??i2_circularbWrite+1,postdec2
  2882                           
  2883                           ;cirBuffer.h: 54: if (cb->end == cb->size) cb->end = 0;
  2884  000BDC  EE20 F004          	lfsr	2,4
  2885  000BE0  5007               	movf	i2circularbWrite@cb,w,c
  2886  000BE2  26D9               	addwf	fsr2l,f,c
  2887  000BE4  5008               	movf	i2circularbWrite@cb+1,w,c
  2888  000BE6  22DA               	addwfc	fsr2h,f,c
  2889  000BE8  EE10 F002          	lfsr	1,2
  2890  000BEC  5007               	movf	i2circularbWrite@cb,w,c
  2891  000BEE  26E1               	addwf	fsr1l,f,c
  2892  000BF0  5008               	movf	i2circularbWrite@cb+1,w,c
  2893  000BF2  22E2               	addwfc	fsr1h,f,c
  2894  000BF4  50DE               	movf	postinc2,w,c
  2895  000BF6  18E6               	xorwf	postinc1,w,c
  2896  000BF8  E10E               	bnz	i2l110
  2897  000BFA  50DE               	movf	postinc2,w,c
  2898  000BFC  18E6               	xorwf	postinc1,w,c
  2899  000BFE  A4D8               	btfss	status,2,c
  2900  000C00  D00A               	goto	i2l110
  2901  000C02  EE20 F002          	lfsr	2,2
  2902  000C06  5007               	movf	i2circularbWrite@cb,w,c
  2903  000C08  26D9               	addwf	fsr2l,f,c
  2904  000C0A  5008               	movf	i2circularbWrite@cb+1,w,c
  2905  000C0C  22DA               	addwfc	fsr2h,f,c
  2906  000C0E  0E00               	movlw	0
  2907  000C10  6EDE               	movwf	postinc2,c
  2908  000C12  0E00               	movlw	0
  2909  000C14  6EDD               	movwf	postdec2,c
  2910  000C16                     i2l110:
  2911                           
  2912                           ;cirBuffer.h: 55: cb->numelem++;
  2913  000C16  EE20 F006          	lfsr	2,6
  2914  000C1A  5007               	movf	i2circularbWrite@cb,w,c
  2915  000C1C  26D9               	addwf	fsr2l,f,c
  2916  000C1E  5008               	movf	i2circularbWrite@cb+1,w,c
  2917  000C20  22DA               	addwfc	fsr2h,f,c
  2918  000C22  2ADE               	incf	postinc2,f,c
  2919  000C24  0E00               	movlw	0
  2920  000C26  22DD               	addwfc	postdec2,f,c
  2921                           
  2922                           ;cirBuffer.h: 56: return 0;
  2923                           ;	Return value of i2_circularbWrite is never used
  2924  000C28  0012               	return	
  2925  000C2A                     __end_ofi2_circularbWrite:
  2926                           	opt stack 0
  2927                           pclatu	equ	0xFFB
  2928                           pclath	equ	0xFFA
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           postinc0	equ	0xFEE
  2937                           fsr0h	equ	0xFEA
  2938                           fsr0l	equ	0xFE9
  2939                           wreg	equ	0xFE8
  2940                           indf1	equ	0xFE7
  2941                           postinc1	equ	0xFE6
  2942                           postdec1	equ	0xFE5
  2943                           fsr1h	equ	0xFE2
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function i2_circularbIsFull *****************
  2953 ;; Defined at:
  2954 ;;		line 35 in file "cirBuffer.h"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  cb              2    0[COMRAM] PTR struct .
  2957 ;;		 -> cbTX1(10), cbRC1(10), 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  circularbIsF    2    4[COMRAM] unsigned int 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  2    0[COMRAM] int 
  2962 ;; Registers used:
  2963 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2969 ;;      Params:         2       0       0       0       0       0       0       0       0
  2970 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2971 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2972 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2973 ;;Total ram usage:        6 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_handler_uart_int
  2979 ;;		i2_circularbWrite
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text20
  2984  001012                     __ptext20:
  2985                           	opt stack 0
  2986  001012                     i2_circularbIsFull:
  2987                           	opt stack 23
  2988                           
  2989                           ;cirBuffer.h: 36: unsigned int aux = cb->end + 1;
  2990                           
  2991                           ;incstack = 0
  2992  001012  EE20 F002          	lfsr	2,2
  2993  001016  5001               	movf	i2circularbIsFull@cb,w,c
  2994  001018  26D9               	addwf	fsr2l,f,c
  2995  00101A  5002               	movf	i2circularbIsFull@cb+1,w,c
  2996  00101C  22DA               	addwfc	fsr2h,f,c
  2997  00101E  CFDE F003          	movff	postinc2,??i2_circularbIsFull
  2998  001022  CFDD F004          	movff	postdec2,??i2_circularbIsFull+1
  2999  001026  0E01               	movlw	1
  3000  001028  2403               	addwf	??i2_circularbIsFull,w,c
  3001  00102A  6E05               	movwf	i2circularbIsFull@aux,c
  3002  00102C  0E00               	movlw	0
  3003  00102E  2004               	addwfc	??i2_circularbIsFull+1,w,c
  3004  001030  6E06               	movwf	i2circularbIsFull@aux+1,c
  3005                           
  3006                           ;cirBuffer.h: 37: if (aux == cb->size) aux = 0;
  3007  001032  EE20 F004          	lfsr	2,4
  3008  001036  5001               	movf	i2circularbIsFull@cb,w,c
  3009  001038  26D9               	addwf	fsr2l,f,c
  3010  00103A  5002               	movf	i2circularbIsFull@cb+1,w,c
  3011  00103C  22DA               	addwfc	fsr2h,f,c
  3012  00103E  5005               	movf	i2circularbIsFull@aux,w,c
  3013  001040  18DE               	xorwf	postinc2,w,c
  3014  001042  E108               	bnz	i2l1539
  3015  001044  5006               	movf	i2circularbIsFull@aux+1,w,c
  3016  001046  18DE               	xorwf	postinc2,w,c
  3017  001048  A4D8               	btfss	status,2,c
  3018  00104A  D004               	goto	i2l1539
  3019  00104C  0E00               	movlw	0
  3020  00104E  6E06               	movwf	i2circularbIsFull@aux+1,c
  3021  001050  0E00               	movlw	0
  3022  001052  6E05               	movwf	i2circularbIsFull@aux,c
  3023  001054                     i2l1539:
  3024                           
  3025                           ;cirBuffer.h: 38: return (aux == cb->start);
  3026  001054  C001  FFD9         	movff	i2circularbIsFull@cb,fsr2l
  3027  001058  C002  FFDA         	movff	i2circularbIsFull@cb+1,fsr2h
  3028  00105C  5005               	movf	i2circularbIsFull@aux,w,c
  3029  00105E  18DE               	xorwf	postinc2,w,c
  3030  001060  E106               	bnz	i2u103_40
  3031  001062  5006               	movf	i2circularbIsFull@aux+1,w,c
  3032  001064  18DE               	xorwf	postinc2,w,c
  3033  001066  A4D8               	btfss	status,2,c
  3034  001068  D002               	goto	i2u103_40
  3035  00106A  0E01               	movlw	1
  3036  00106C  D001               	goto	i2u104_40
  3037  00106E                     i2u103_40:
  3038  00106E  0E00               	movlw	0
  3039  001070                     i2u104_40:
  3040  001070  6E01               	movwf	?i2_circularbIsFull,c
  3041  001072  6A02               	clrf	?i2_circularbIsFull+1,c
  3042  001074  0012               	return	
  3043  001076                     __end_ofi2_circularbIsFull:
  3044                           	opt stack 0
  3045                           pclatu	equ	0xFFB
  3046                           pclath	equ	0xFFA
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           prodh	equ	0xFF4
  3052                           prodl	equ	0xFF3
  3053                           intcon	equ	0xFF2
  3054                           postinc0	equ	0xFEE
  3055                           fsr0h	equ	0xFEA
  3056                           fsr0l	equ	0xFE9
  3057                           wreg	equ	0xFE8
  3058                           indf1	equ	0xFE7
  3059                           postinc1	equ	0xFE6
  3060                           postdec1	equ	0xFE5
  3061                           fsr1h	equ	0xFE2
  3062                           fsr1l	equ	0xFE1
  3063                           indf2	equ	0xFDF
  3064                           postinc2	equ	0xFDE
  3065                           postdec2	equ	0xFDD
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070 ;; *************** function i2_circularbRead *****************
  3071 ;; Defined at:
  3072 ;;		line 60 in file "cirBuffer.h"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  cb              2    0[COMRAM] PTR struct .
  3075 ;;		 -> cbTX1(10), cbRC1(10), 
  3076 ;;  element         2    2[COMRAM] PTR unsigned char 
  3077 ;;		 -> handler_uart_int@toTransmit(1), main@recievedBuffer(100), 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;		None
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  2    0[COMRAM] int 
  3082 ;; Registers used:
  3083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3089 ;;      Params:         4       0       0       0       0       0       0       0       0
  3090 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3091 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3092 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3093 ;;Total ram usage:        8 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_handler_uart_int
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text21
  3103  000DAA                     __ptext21:
  3104                           	opt stack 0
  3105  000DAA                     i2_circularbRead:
  3106                           	opt stack 24
  3107                           
  3108                           ;cirBuffer.h: 61: *element = cb->buffer[cb->start];
  3109                           
  3110                           ;incstack = 0
  3111  000DAA  C001  FFD9         	movff	i2circularbRead@cb,fsr2l
  3112  000DAE  C002  FFDA         	movff	i2circularbRead@cb+1,fsr2h
  3113  000DB2  CFDE F005          	movff	postinc2,??i2_circularbRead
  3114  000DB6  CFDD F006          	movff	postdec2,??i2_circularbRead+1
  3115  000DBA  EE20 F008          	lfsr	2,8
  3116  000DBE  5001               	movf	i2circularbRead@cb,w,c
  3117  000DC0  26D9               	addwf	fsr2l,f,c
  3118  000DC2  5002               	movf	i2circularbRead@cb+1,w,c
  3119  000DC4  22DA               	addwfc	fsr2h,f,c
  3120  000DC6  CFDE F007          	movff	postinc2,??i2_circularbRead+2
  3121  000DCA  CFDD F008          	movff	postdec2,??i2_circularbRead+3
  3122  000DCE  5005               	movf	??i2_circularbRead,w,c
  3123  000DD0  2407               	addwf	??i2_circularbRead+2,w,c
  3124  000DD2  6ED9               	movwf	fsr2l,c
  3125  000DD4  5006               	movf	??i2_circularbRead+1,w,c
  3126  000DD6  2008               	addwfc	??i2_circularbRead+3,w,c
  3127  000DD8  6EDA               	movwf	fsr2h,c
  3128  000DDA  C003  FFE1         	movff	i2circularbRead@element,fsr1l
  3129  000DDE  C004  FFE2         	movff	i2circularbRead@element+1,fsr1h
  3130  000DE2  CFDF FFE7          	movff	indf2,indf1
  3131                           
  3132                           ;cirBuffer.h: 62: cb->start = cb->start + 1;
  3133  000DE6  C001  FFD9         	movff	i2circularbRead@cb,fsr2l
  3134  000DEA  C002  FFDA         	movff	i2circularbRead@cb+1,fsr2h
  3135  000DEE  CFDE F005          	movff	postinc2,??i2_circularbRead
  3136  000DF2  CFDD F006          	movff	postdec2,??i2_circularbRead+1
  3137  000DF6  0E01               	movlw	1
  3138  000DF8  2605               	addwf	??i2_circularbRead,f,c
  3139  000DFA  0E00               	movlw	0
  3140  000DFC  2206               	addwfc	??i2_circularbRead+1,f,c
  3141  000DFE  C001  FFD9         	movff	i2circularbRead@cb,fsr2l
  3142  000E02  C002  FFDA         	movff	i2circularbRead@cb+1,fsr2h
  3143  000E06  C005  FFDE         	movff	??i2_circularbRead,postinc2
  3144  000E0A  C006  FFDD         	movff	??i2_circularbRead+1,postdec2
  3145                           
  3146                           ;cirBuffer.h: 63: if (cb->start == cb->size) cb->start = 0;
  3147  000E0E  EE20 F004          	lfsr	2,4
  3148  000E12  5001               	movf	i2circularbRead@cb,w,c
  3149  000E14  26D9               	addwf	fsr2l,f,c
  3150  000E16  5002               	movf	i2circularbRead@cb+1,w,c
  3151  000E18  22DA               	addwfc	fsr2h,f,c
  3152  000E1A  C001  FFE1         	movff	i2circularbRead@cb,fsr1l
  3153  000E1E  C002  FFE2         	movff	i2circularbRead@cb+1,fsr1h
  3154  000E22  50DE               	movf	postinc2,w,c
  3155  000E24  18E6               	xorwf	postinc1,w,c
  3156  000E26  E10C               	bnz	i2l1357
  3157  000E28  50DE               	movf	postinc2,w,c
  3158  000E2A  18E6               	xorwf	postinc1,w,c
  3159  000E2C  A4D8               	btfss	status,2,c
  3160  000E2E  D008               	goto	i2l1357
  3161  000E30  C001  FFD9         	movff	i2circularbRead@cb,fsr2l
  3162  000E34  C002  FFDA         	movff	i2circularbRead@cb+1,fsr2h
  3163  000E38  0E00               	movlw	0
  3164  000E3A  6EDE               	movwf	postinc2,c
  3165  000E3C  0E00               	movlw	0
  3166  000E3E  6EDD               	movwf	postdec2,c
  3167  000E40                     i2l1357:
  3168                           
  3169                           ;cirBuffer.h: 64: cb->numelem--;
  3170  000E40  EE20 F006          	lfsr	2,6
  3171  000E44  5001               	movf	i2circularbRead@cb,w,c
  3172  000E46  26D9               	addwf	fsr2l,f,c
  3173  000E48  5002               	movf	i2circularbRead@cb+1,w,c
  3174  000E4A  22DA               	addwfc	fsr2h,f,c
  3175  000E4C  06DE               	decf	postinc2,f,c
  3176  000E4E  0E00               	movlw	0
  3177  000E50  5ADD               	subwfb	postdec2,f,c
  3178  000E52  0012               	return	
  3179  000E54                     __end_ofi2_circularbRead:
  3180                           	opt stack 0
  3181                           pclatu	equ	0xFFB
  3182                           pclath	equ	0xFFA
  3183                           tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           prodh	equ	0xFF4
  3188                           prodl	equ	0xFF3
  3189                           intcon	equ	0xFF2
  3190                           postinc0	equ	0xFEE
  3191                           fsr0h	equ	0xFEA
  3192                           fsr0l	equ	0xFE9
  3193                           wreg	equ	0xFE8
  3194                           indf1	equ	0xFE7
  3195                           postinc1	equ	0xFE6
  3196                           postdec1	equ	0xFE5
  3197                           fsr1h	equ	0xFE2
  3198                           fsr1l	equ	0xFE1
  3199                           indf2	equ	0xFDF
  3200                           postinc2	equ	0xFDE
  3201                           postdec2	equ	0xFDD
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function i2_circularbIsEmpty *****************
  3207 ;; Defined at:
  3208 ;;		line 45 in file "cirBuffer.h"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  cb              2    0[COMRAM] PTR struct .
  3211 ;;		 -> cbTX1(10), cbRC1(10), 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  2    0[COMRAM] int 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3223 ;;      Params:         2       0       0       0       0       0       0       0       0
  3224 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3225 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3226 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3227 ;;Total ram usage:        6 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_handler_uart_int
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text22
  3237  0011CA                     __ptext22:
  3238                           	opt stack 0
  3239  0011CA                     i2_circularbIsEmpty:
  3240                           	opt stack 24
  3241                           
  3242                           ;cirBuffer.h: 46: return cb->end == cb->start;
  3243                           
  3244                           ;incstack = 0
  3245  0011CA  C001  FFD9         	movff	i2circularbIsEmpty@cb,fsr2l
  3246  0011CE  C002  FFDA         	movff	i2circularbIsEmpty@cb+1,fsr2h
  3247  0011D2  EE10 F002          	lfsr	1,2
  3248  0011D6  5001               	movf	i2circularbIsEmpty@cb,w,c
  3249  0011D8  26E1               	addwf	fsr1l,f,c
  3250  0011DA  5002               	movf	i2circularbIsEmpty@cb+1,w,c
  3251  0011DC  22E2               	addwfc	fsr1h,f,c
  3252  0011DE  50DE               	movf	postinc2,w,c
  3253  0011E0  18E6               	xorwf	postinc1,w,c
  3254  0011E2  E106               	bnz	i2u77_40
  3255  0011E4  50DE               	movf	postinc2,w,c
  3256  0011E6  18E6               	xorwf	postinc1,w,c
  3257  0011E8  A4D8               	btfss	status,2,c
  3258  0011EA  D002               	goto	i2u77_40
  3259  0011EC  0E01               	movlw	1
  3260  0011EE  D001               	goto	i2u78_40
  3261  0011F0                     i2u77_40:
  3262  0011F0  0E00               	movlw	0
  3263  0011F2                     i2u78_40:
  3264  0011F2  6E01               	movwf	?i2_circularbIsEmpty,c
  3265  0011F4  6A02               	clrf	?i2_circularbIsEmpty+1,c
  3266  0011F6  0012               	return	
  3267  0011F8                     __end_ofi2_circularbIsEmpty:
  3268                           	opt stack 0
  3269                           pclatu	equ	0xFFB
  3270                           pclath	equ	0xFFA
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           intcon	equ	0xFF2
  3278                           postinc0	equ	0xFEE
  3279                           fsr0h	equ	0xFEA
  3280                           fsr0l	equ	0xFE9
  3281                           wreg	equ	0xFE8
  3282                           indf1	equ	0xFE7
  3283                           postinc1	equ	0xFE6
  3284                           postdec1	equ	0xFE5
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8
  3293                           pclatu	equ	0xFFB
  3294                           pclath	equ	0xFFA
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           intcon	equ	0xFF2
  3302                           postinc0	equ	0xFEE
  3303                           fsr0h	equ	0xFEA
  3304                           fsr0l	equ	0xFE9
  3305                           wreg	equ	0xFE8
  3306                           indf1	equ	0xFE7
  3307                           postinc1	equ	0xFE6
  3308                           postdec1	equ	0xFE5
  3309                           fsr1h	equ	0xFE2
  3310                           fsr1l	equ	0xFE1
  3311                           indf2	equ	0xFDF
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318                           	psect	rparam
  3319  0000                     pclatu	equ	0xFFB
  3320                           pclath	equ	0xFFA
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           prodh	equ	0xFF4
  3326                           prodl	equ	0xFF3
  3327                           intcon	equ	0xFF2
  3328                           postinc0	equ	0xFEE
  3329                           fsr0h	equ	0xFEA
  3330                           fsr0l	equ	0xFE9
  3331                           wreg	equ	0xFE8
  3332                           indf1	equ	0xFE7
  3333                           postinc1	equ	0xFE6
  3334                           postdec1	equ	0xFE5
  3335                           fsr1h	equ	0xFE2
  3336                           fsr1l	equ	0xFE1
  3337                           indf2	equ	0xFDF
  3338                           postinc2	equ	0xFDE
  3339                           postdec2	equ	0xFDD
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344                           	psect	temp
  3345  000041                     btemp:
  3346                           	opt stack 0
  3347  000041                     	ds	1
  3348  0000                     int$flags	set	btemp
  3349                           pclatu	equ	0xFFB
  3350                           pclath	equ	0xFFA
  3351                           tblptru	equ	0xFF8
  3352                           tblptrh	equ	0xFF7
  3353                           tblptrl	equ	0xFF6
  3354                           tablat	equ	0xFF5
  3355                           prodh	equ	0xFF4
  3356                           prodl	equ	0xFF3
  3357                           intcon	equ	0xFF2
  3358                           postinc0	equ	0xFEE
  3359                           fsr0h	equ	0xFEA
  3360                           fsr0l	equ	0xFE9
  3361                           wreg	equ	0xFE8
  3362                           indf1	equ	0xFE7
  3363                           postinc1	equ	0xFE6
  3364                           postdec1	equ	0xFE5
  3365                           fsr1h	equ	0xFE2
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         276
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      64
    BANK0           160    122     122
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_2(CODE[21]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_2(CODE[21]), 

    readData@data	PTR unsigned char  size(2) Largest target is 100
		 -> main@recievedBuffer(BANK0[100]), 

    sendData@data	PTR unsigned char  size(2) Largest target is 100
		 -> main@recievedBuffer(BANK0[100]), STR_1(CODE[21]), 

    cbTX1.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    cbRC1.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    readXData@data	PTR unsigned char  size(2) Largest target is 100
		 -> main@recievedBuffer(BANK0[100]), 

    readXData@cbRC	PTR struct . size(2) Largest target is 11
		 -> cbRC1(COMRAM[10]), 

    sendXData@data	PTR unsigned char  size(2) Largest target is 100
		 -> main@recievedBuffer(BANK0[100]), STR_1(CODE[21]), 

    sendXData@cbTX	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), 

    sendXByte@cbTX	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), 

    dataXAvailable@cbRC	PTR struct . size(2) Largest target is 11
		 -> cbRC1(COMRAM[10]), 

    circularbRead@cb.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbRead@cb	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), cbRC1(COMRAM[10]), 

    circularbRead@element	PTR unsigned char  size(2) Largest target is 100
		 -> handler_uart_int@toTransmit(COMRAM[1]), main@recievedBuffer(BANK0[100]), 

    circularbWrite@cb.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbWrite@element	PTR unsigned char  size(2) Largest target is 100
		 -> handler_uart_int@readed(COMRAM[1]), sendXByte@data(BANK0[1]), main@recievedBuffer(BANK0[100]), STR_1(CODE[21]), 

    circularbWrite@cb	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), cbRC1(COMRAM[10]), 

    circularbIsEmpty@cb.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbIsEmpty@cb	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), cbRC1(COMRAM[10]), 

    circularbNumElements@cb.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbNumElements@cb	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), cbRC1(COMRAM[10]), 

    circularbIsFull@cb.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbIsFull@cb	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), cbRC1(COMRAM[10]), 

    circularbFree@cb.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    S74$buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbInit@cb.buffer	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbInit@buf	PTR unsigned char  size(2) Largest target is 128
		 -> buff_tx1(BANK1[128]), buff_rc1(BANK1[128]), 

    circularbInit@cb	PTR struct . size(2) Largest target is 11
		 -> cbTX1(COMRAM[10]), cbRC1(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _sendXData->_circularbWrite
    _sendXByte->_circularbWrite
    _circularbWrite->_circularbIsFull
    _readData->_readXData
    _readXData->_circularbRead
    _initUart->_circularbInit
    _dataAvailable->_dataXAvailable
    _dataXAvailable->_circularbNumElements

Critical Paths under _ISR in COMRAM

    _ISR->_handler_uart_int
    _handler_uart_int->i2_circularbWrite
    i2_circularbWrite->i2_circularbIsFull

Critical Paths under _main in BANK0

    _main->_sendData
    _sendData->_sendXData
    _sendByte->_sendXByte
    _readData->_readXData

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               125   125      0    9915
                                             17 BANK0    105   105      0
                      _dataAvailable
                           _initUart
                           _readData
                           _sendByte
                           _sendData
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     154
                                             30 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _sendData                                             5     0      5    3495
                                             12 BANK0      5     0      5
                          _sendXData
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _sendXData                                           12     5      7    2940
                                              0 BANK0     12     5      7
                    _circularbIsFull
               _circularbNumElements
                     _circularbWrite
 ---------------------------------------------------------------------------------
 (1) _sendByte                                             2     1      1    2646
                                              5 BANK0      2     1      1
                          _sendXByte
 ---------------------------------------------------------------------------------
 (2) _sendXByte                                            5     2      3    2045
                                              0 BANK0      5     2      3
                    _circularbIsFull
                     _circularbWrite
 ---------------------------------------------------------------------------------
 (3) _circularbWrite                                       8     4      4    1290
                                             36 COMRAM     8     4      4
                    _circularbIsFull
 ---------------------------------------------------------------------------------
 (4) _circularbIsFull                                      6     4      2     434
                                             30 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _readData                                             4     0      4    2407
                                              5 BANK0      4     0      4
                          _readXData
 ---------------------------------------------------------------------------------
 (2) _readXData                                           11     5      6    2191
                                             38 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                   _circularbIsEmpty
               _circularbNumElements
                      _circularbRead
 ---------------------------------------------------------------------------------
 (3) _circularbRead                                        8     4      4     825
                                             30 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _circularbIsEmpty                                     6     4      2     258
                                             30 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _initUart                                             0     0      0     538
                      _circularbInit
 ---------------------------------------------------------------------------------
 (2) _circularbInit                                        6     0      6     538
                                             30 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _dataAvailable                                        0     0      0     524
                     _dataXAvailable
 ---------------------------------------------------------------------------------
 (2) _dataXAvailable                                       2     0      2     524
                                             32 COMRAM     2     0      2
               _circularbNumElements
 ---------------------------------------------------------------------------------
 (3) _circularbNumElements                                 2     0      2     416
                                             30 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0    1276
                                             16 COMRAM    14    14      0
                   _handler_uart_int
 ---------------------------------------------------------------------------------
 (6) _handler_uart_int                                     2     2      0    1276
                                             14 COMRAM     2     2      0
                 i2_circularbIsEmpty
                  i2_circularbIsFull
                    i2_circularbRead
                   i2_circularbWrite
 ---------------------------------------------------------------------------------
 (7) i2_circularbWrite                                     8     4      4     611
                                              6 COMRAM     8     4      4
                  i2_circularbIsFull
 ---------------------------------------------------------------------------------
 (8) i2_circularbIsFull                                    6     4      2     231
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) i2_circularbRead                                      8     4      4     250
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) i2_circularbIsEmpty                                   6     4      2      70
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dataAvailable
     _dataXAvailable
       _circularbNumElements
   _initUart
     _circularbInit
   _readData
     _readXData
       _circularbIsEmpty
       _circularbNumElements
       _circularbRead
   _sendByte
     _sendXByte
       _circularbIsFull
       _circularbWrite
         _circularbIsFull
   _sendData
     _sendXData
       _circularbIsFull
       _circularbNumElements
       _circularbWrite
         _circularbIsFull
     _strlen (ARG)
   _strlen

 _ISR (ROOT)
   _handler_uart_int
     i2_circularbIsEmpty
     i2_circularbIsFull
     i2_circularbRead
     i2_circularbWrite
       i2_circularbIsFull

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7A      7A       5       76.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      40       1       68.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BA      20        0.0%
DATA                 0      0     1BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Mar 23 18:10:20 2017

            ??i2_circularbRead 0005            ??i2_circularbIsFull 0003             ??i2_circularbWrite 000B  
         ??i2_circularbIsEmpty 0003                    __CFG_BOR$ON 000000                    __CFG_BORV$3 000000  
              ??_circularbInit 0025                ??_circularbRead 0023                ?_dataXAvailable 0021  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                    __CFG_LVP$ON 000000          ?_circularbNumElements 001F  
                  __CFG_WDT$ON 000000                            l110 0B26                            l125 1122  
                          l149 0926                            _GIE 007F97                   __CFG_CPB$OFF 000000  
                          _RC0 007C10                   __CFG_CPD$OFF 000000                            _ISR 0008  
                          u940 100A                            u950 100C                            u960 11C2  
                          _RX9 007D5E                            u970 11C4                            u990 0ABA  
                          _TX9 007D66                            u997 0AB0                            _WUE 007DC1  
                          wreg 000FE8               ??_circularbWrite 0029      __end_ofi2_circularbIsFull 1076  
                         ?_ISR 0001               sendData@waitToTx 0070                           l1411 113A  
                         l1413 113E                           l1611 092E                           l1603 0908  
                         l1621 0C5C                           l1509 0A66                           l1631 0C9A  
                         l1623 0C70                           l1529 0D8E                           l1633 0CB0  
                         l1641 0CE2                           l1625 0C7C                           l1491 0FF0  
                         l1565 112A                           l1549 10E2                           l1725 098C  
                         l1591 08CC                           l1575 085E                           l1735 09EA  
                         l1577 0882                           l1579 088E                           l1589 08B6  
                         STR_1 0801                           STR_2 0801                           _BRGH 007D62  
                         _CREN 007D5C                           u1357 09FA                           u1367 0A18  
                         _IPEN 007E87                           _PEIE 007F96                           _RCIE 007CED  
                         _RCIF 007CF5                           _RCIP 007CFD                           _SPEN 007D5F  
                         _TXIF 007CF4                           _SYNC 007D64                           _TXIP 007CFC  
                         _main 0934                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0041                           prodh 000FF4                           prodl 000FF3  
                         start 000E                  __CFG_IESO$OFF 000000              ??_circularbIsFull 0021  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                          ??_ISR 0011  
                __CFG_PLLDIV$3 000000                 __CFG_CCP2MX$ON 000000                          _ABDEN 007DC0  
                        _ADDEN 007D5B                          ?_main 0001                          _BRG16 007DC3  
                        i2l110 0C16                          i2l205 0F76                          i2l206 0F72  
                        _RCREG 000FAE                          _SENDB 007D63                          _SPBRG 000FAF  
                __CFG_USBDIV$1 000000                          _RXDTP 007DC5                          _TXCKP 007DC4  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                          _cbRC1 0037                 __CFG_EBTR3$OFF 000000  
                        _cbTX1 002D                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                          pclath 000FFA  
                        tablat 000FF5              ?_circularbIsEmpty 001F                          status 000FD8  
           ??_circularbIsEmpty 0021                 __CFG_PBADEN$ON 000000                __initialization 116E  
                 __end_of_main 0A4C         ??_circularbNumElements 0021                         ??_main 0071  
                __activetblptr 000002             dataXAvailable@cbRC 0021     __size_ofi2_circularbIsFull 0064  
                       i2l1357 0E40                         i2l1539 1054                         i2l1683 0FAA  
                       _SPBRGH 000FB0                         _TRISC0 007CA0                         _TRISC6 007CA6  
                       _TRISC7 007CA7             sendXData@sizegiven 0068      __size_of_handler_uart_int 0070  
               __CFG_XINST$OFF 000000                 __CFG_STVREN$ON 000000               __end_of_readData 125A  
             __end_of_initUart 0F3E                         clear_0 1176                         clear_1 1188  
             __end_of_sendData 121E               __end_of_sendByte 123C                         _strlen 1130  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                i2_circularbRead 0DAA                     __accesstop 0060  
      __end_of__initialization 118E                  ___rparam_used 000001                 __pcstackCOMRAM 0001  
             ??_dataXAvailable 0023           circularbRead@element 0021                  sendXData@cbTX 0065  
                sendXData@data 0060                  sendXData@size 0062      __size_ofi2_circularbWrite 00E8  
            sendXByte@waitToTx 0060                _circularbIsFull 0FAE                     __pbssBANK1 0100  
           __size_of_readXData 00CE                  sendXByte@cbTX 0061                  sendXByte@data 0063  
                 readData@data 0065             __size_of_sendXData 011C             __size_of_sendXByte 0058  
                 readData@size 0067         __size_of_dataAvailable 000E    __size_ofi2_circularbIsEmpty 002E  
                      ?_strlen 001F                   readXData@ret 0060          __end_of_circularbInit 10D8  
        __end_of_circularbRead 0DAA        __end_ofi2_circularbRead 0E54             main@recievedBuffer 0073  
                      i2u77_40 11F0                        i2u78_40 11F2              i2circularbRead@cb 0001  
              __CFG_VREGEN$OFF 000000                      ?_readData 0065                      ?_initUart 0001  
             circularbInit@buf 0021                      ?_sendData 006C                      ?_sendByte 0065  
             _handler_uart_int 0F3E                        __Hparam 0000                        __Lparam 0000  
                 __psmallconst 0800      __size_of_circularbIsEmpty 002E                        __pcinit 116E  
                      __ramtop 0800                        __ptext0 0934                        __ptext1 1130  
                      __ptext2 11F8                        __ptext3 0818                        __ptext4 121E  
                      __ptext5 10D8                        __ptext6 0A4C                        __ptext7 0FAE  
                      __ptext8 123C                        __ptext9 0C2A                 readXData@index 0063  
            __end_of_readXData 0CF8        __end_of_circularbIsFull 1012                __size_of_strlen 003E  
                 __size_of_ISR 0EC6               circularbWrite@cb 0025              __end_of_sendXData 0934  
            __end_of_sendXByte 1130                  _dataAvailable 1280                 __pintcode_body 0E54  
         end_of_initialization 118E                     ??_readData 002D                     ??_initUart 0025  
                __Lmediumconst 0000                        int_func 0E54                     ??_sendData 002D  
                   ??_sendByte 002D        __size_of_circularbWrite 00F6            i2circularbIsFull@cb 0001  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                        strlen@s 001F  
__size_of_circularbNumElements 0016               i2_circularbWrite 0B42               ?i2_circularbRead 0001  
               ?_dataAvailable 0001                      _TXSTAbits 000FAC                     main@recLen 00D9  
           circularbIsEmpty@cb 001F             circularbIsFull@aux 0023     handler_uart_int@toTransmit 0010  
             ?_circularbIsFull 001F                 __end_of_strlen 116E            start_initialization 116E  
                  __end_of_ISR 0ECE                 sendXData@index 006A              sendXData@waitToTx 0064  
             _circularbIsEmpty 119C               __CFG_LPT1OSC$OFF 000000                       ??_strlen 0021  
                 sendData@data 006C                   sendData@size 006E       __end_of_handler_uart_int 0FAE  
                  __pbssCOMRAM 002D                ??_dataAvailable 0023                  __pcstackBANK0 0060  
                 sendXData@ret 0067                 _circularbWrite 0A4C              __size_of_readData 001E  
            __size_of_initUart 0070                   sendXByte@ret 0064     __end_ofi2_circularbIsEmpty 11F8  
            __size_of_sendData 0026                   sendByte@data 0066                      __pintcode 0008  
            __size_of_sendByte 001E          circularbWrite@element 0027                    __smallconst 0800  
      __size_of_dataXAvailable 0010                circularbInit@cb 001F                circularbRead@cb 001F  
                    _readXData 0C2A                  readXData@cbRC 002B                  readXData@data 0027  
                readXData@size 0029         __end_of_circularbWrite 0B42                      _sendXData 0818  
                    _sendXByte 10D8                       _PIE1bits 000F9D         __size_of_circularbInit 0062  
       __size_of_circularbRead 00B2                       i2u103_40 106E                       i2u104_40 1070  
     __end_ofi2_circularbWrite 0C2A                       i2u124_40 0BAA                       i2u124_47 0BA0  
       handler_uart_int@readed 000F               __CFG_WDTPS$32768 000000               sendByte@waitToTx 0065  
            circularbIsFull@cb 001F                     ?_readXData 0027             i2circularbWrite@cb 0007  
           readXData@sizegiven 0061                ?_circularbWrite 0025   __end_of_circularbNumElements 1270  
            circularbInit@size 0023                     ?_sendXData 0060                     ?_sendXByte 0060  
                     __Hrparam 0000                       __Lrparam 0000                  _circularbInit 1076  
                _circularbRead 0CF8                       __ptext10 0CF8                       __ptext11 119C  
                     __ptext20 1012                       __ptext12 0ECE                       __ptext21 0DAA  
                     __ptext13 1076                       __ptext22 11CA                       __ptext14 1280  
                     __ptext15 1270                       __ptext16 125A                       __ptext18 0F3E  
                     __ptext19 0B42                       _buff_rc1 0180                       _buff_tx1 0100  
     __end_of_circularbIsEmpty 11CA                       _readData 123C       __size_ofi2_circularbRead 00AA  
                     _initUart 0ECE                  __size_of_main 0118                       _sendData 11F8  
                     _sendByte 121E                       int$flags 0041               main@pulseCounter 00D7  
       i2circularbRead@element 0003        i2circularbWrite@element 0009          __CFG_CPUDIV$OSC1_PLL2 000000  
               ?_circularbInit 001F                 ?_circularbRead 001F                 _dataXAvailable 1270  
            ?_handler_uart_int 0001                    ??_readXData 002D             ??_handler_uart_int 000F  
     __size_of_circularbIsFull 0064                       intlevel2 0000                    ??_sendXData 002D  
                  ??_sendXByte 002D         circularbNumElements@cb 001F           i2circularbIsEmpty@cb 0001  
         i2circularbIsFull@aux 0005         __end_of_dataXAvailable 1280           _circularbNumElements 125A  
           i2_circularbIsEmpty 11CA                       strlen@cp 0023          __end_of_dataAvailable 128E  
          ?i2_circularbIsEmpty 0001             __CFG_FOSC$HSPLL_HS 000000              i2_circularbIsFull 1012  
           ?i2_circularbIsFull 0001              ?i2_circularbWrite 0007  
